{
	"version": "https://github.com/jeff-hykin/better-c-syntax/commit/34712a6106a4ffb0a04d2fa836fd28ff6c5849a4",
	"name": "Dynasm C",
	"scopeName": "source.dasc",
	"patterns": [
		{
			"include": "#basic-line"
		}
	],
	"repository": {
		"basic-line": {
			"patterns": [
				{
					"match": "^([ \t]*[|].*)$",
					"include": "#dasc-code"
				},
				{
					"match": "^([ \t]*[^\\| \t].*)$",
					"include": "#c-code"
				}
			]
		},
		"c-code": {
			"patterns": [
				{
					"include": "#preprocessor-rule-enabled"
				},
				{
					"include": "#preprocessor-rule-disabled"
				},
				{
					"include": "#preprocessor-rule-conditional"
				},
				{
					"include": "#predefined_macros"
				},
				{
					"include": "#comments"
				},
				{
					"include": "#switch_statement"
				},
				{
					"include": "#anon_pattern_1"
				},
				{
					"include": "#storage_types"
				},
				{
					"include": "#anon_pattern_2"
				},
				{
					"include": "#anon_pattern_3"
				},
				{
					"include": "#anon_pattern_4"
				},
				{
					"include": "#anon_pattern_5"
				},
				{
					"include": "#anon_pattern_6"
				},
				{
					"include": "#anon_pattern_7"
				},
				{
					"include": "#operators"
				},
				{
					"include": "#numbers"
				},
				{
					"include": "#strings"
				},
				{
					"include": "#anon_pattern_range_1"
				},
				{
					"include": "#anon_pattern_range_2"
				},
				{
					"include": "#anon_pattern_range_3"
				},
				{
					"include": "#pragma-mark"
				},
				{
					"include": "#anon_pattern_range_4"
				},
				{
					"include": "#anon_pattern_range_5"
				},
				{
					"include": "#anon_pattern_range_6"
				},
				{
					"include": "#anon_pattern_8"
				},
				{
					"include": "#anon_pattern_9"
				},
				{
					"include": "#anon_pattern_10"
				},
				{
					"include": "#anon_pattern_11"
				},
				{
					"include": "#anon_pattern_12"
				},
				{
					"include": "#anon_pattern_13"
				},
				{
					"include": "#block"
				},
				{
					"include": "#parens"
				},
				{
					"include": "#anon_pattern_range_7"
				},
				{
					"include": "#line_continuation_character"
				},
				{
					"include": "#anon_pattern_range_8"
				},
				{
					"include": "#anon_pattern_range_9"
				},
				{
					"include": "#anon_pattern_14"
				},
				{
					"include": "#anon_pattern_15"
				}
			]
		},
		"dasc-code": {
			"patterns": [
				{
					"include": "#dasc-dmacro"
				},
				{
					"include": "#dasc-macro"
				},
				{
					"include": "#dasc-endmacro"
				},
				{
					"include": "#dasc-instr"
				},
				{
					"include": "#dasc-macrouse"
				},
				{
					"include": "#dasc-label"
				}
			]
		},
        "dasc-label": {
            "patterns": [
                {
                    "match": "^[ \t]*\\|[ \t]*(?:->[ \t]*([a-zA-Z_][a-zA-Z0-9_]*)[ \t]*|[ \t]*([1-9])[ \t]*|[ \t]*([1-9])[ \t]*):",
                    "captures": {
                        "1": {
                            "name": "entity.name.function.dasc"
                        }
                    }
                },
                {
                    "match": "=>[ \t]*(.*)[ \t]*:",
                    "captures": {
                        "1": {
                            "include": "#c-code"
                        }
                    }
                }
            ]
        },
        "dasc-register": {
            "patterns": [
                {
                    "name": "constant.language.register.xmm.dasc",
                    "match": "\\b(xmm[2-9]|xmm1[0-5]?|xmm0)\\b"
                },
                {
                    "name": "constant.language.register.ymm.dasc",
                    "match": "\\b(ymm[2-9]|ymm1[0-5]?|ymm0)\\b"
                },
                {
                    "name": "constant.language.register.b64.dasc",
                    "match": "\\b(rax|rbx|rcx|rdx|rsi|rdi|rsp|rbp|rip|r[2-9]|r1[0-5]?|r0)\\b"
                },
                {
                    "name": "constant.language.register.b32.dasc",
                    "match": "\\b(eax|ebx|ecx|edx|esi|ebp|esp|ebp|r[2-9]d|r1[0-5]?d|r0d)\\b"
                },
                {
                    "name": "constant.language.register.b16.dasc",
                    "match": "\\b(ax|bx|cx|dx|si|bp|sp|bp|r[2-9]w|r1[0-5]?w|r0w)\\b"
                },
                {
                    "name": "constant.language.register.b8.dasc",
                    "match": "\\b(ah|bh|ch|dh|al|bl|cl|dl|r[2-9]l|r1[0-5]?l|r0l)\\b"
                },
                {
                    "match": "(Rq|Rd|Rw|Rb|Rf|xmm|ymm|Ra)\\((.*?)\\)",
                    "captures": {
                        "1": {
                            "name": "constant.language.register.dynamic.dasc"
                        },
                        "2": {
                            "include": "#c-code"
                        }
                    }
                }
            ]
        },
        "dasc-arg": {
            "patterns": [
                {
                    "include": "#dasc-register"
                },
                {
                    "match": "->[ \t]*([a-zA-Z_][a-zA-Z0-9_]*)[ \t]*|>[ \t]*([1-9])|<[ \t]*([1-9])",
                    "captures": {
                        "1": {
                            "name": "entity.name.function.dasc"
                        }
                    }
                },
                {
                    "match": "=>[ \t]*(.*)[ \t]*",
                    "captures": {
                        "1": {
                            "include": "#c-code"
                        }
                    }
                },
                {
                    "include": "#c-code"
                }
            ]
        },
        "dasc-macrouse": {
            "match": "^[ \t]*\\|[ \t]*([a-zA-Z_][a-zA-Z0-9_]*)(.*)",
            "captures": {
                "1": {
                    "name": "keyword.operator.word.dasc"
                },
                "2": {
                    "patterns": [
                        {
                            "include": "#dasc-arg"
                        }
                    ]
                }
            }
        },
        "dasc-instr": {
            "match": "^[ \t]*\\|[ \t]*\\b(a16|cbw|cdq|cdqe|clc|cld|cmc|cmpsb|cmpsd|cmpsw|cpuid|cqo|cs|cwd|cwde|ds|es|f2xm1|fabs|fchs|fclex|fcompp|fcos|fdecstp|fincstp|fld1|fldl2e|fldl2t|fldlg2|fldln2|fldpi|fldz|fnclex|fnop|fpatan|fpop|fprem|fprem1|fptan|frndint|fs|fscale|fsin|fsincos|fsqrt|ftst|fucompp|fwait|fxam|fxch|fxtract|fyl2x|fyl2xp1|gs|int1|int3|into|lahf|leave|lfence|lock|lodsb|lodsd|lodsw|mfence|movsb|movsd|movsw|nop|o16|pause|popf|popfd|pushf|pushfd|rdpmc|rdtsc|rep|repe|repne|repnz|repz|ret|sahf|scasb|scasd|scasw|sfence|ss|stc|std|stosb|stosd|stosw|vzeroall|vzeroupper|wait|bswap|call|clflush|dec|div|fadd|faddp|fcmovb|fcmovbe|fcmove|fcmovnb|fcmovnbe|fcmovne|fcmovnu|fcmovu|fcom|fcomi|fcomip|fcomp|fdiv|fdivp|fdivr|fdivrp|fiadd|ficom|ficomp|fidiv|fidivr|fild|fimul|fist|fistp|fisttp|fisub|fisubr|fld|fldcw|fldenv|fmul|fmulp|fnstcw|fnstenv|fnstsw|fst|fstcw|fstenv|fstp|fstsw|fsub|fsubp|fsubr|fsubrp|fucom|fucomi|fucomip|fucomp|fxch|fxrstor|fxsave|idiv|imul|inc|int|ja|jae|jb|jbe|jc|je|jg|jge|jl|jle|jmp|jna|jnae|jnb|jnbe|jnc|jne|jng|jnge|jnl|jnle|jno|jnp|jns|jnz|jo|jp|jpe|jpo|js|jz|ldmxcsr|mul|neg|not|pop|prefetchnta|prefetcht0|prefetcht1|prefetcht2|push|ret|seta|setae|setb|setbe|setc|sete|setg|setge|setl|setle|setna|setnae|setnb|setnbe|setnc|setne|setng|setnge|setnl|setnle|setno|setnp|setns|setnz|seto|setp|setpe|setpo|sets|setz|stmxcsr|vldmxcsr|vstmxcsr|adc|adcx|add|addpd|addps|addsd|addss|addsubpd|addsubps|adox|aesdec|aesdeclast|aesenc|aesenclast|aesimc|and|andnpd|andnps|andpd|andps|blsi|blsmsk|blsr|bsf|bsr|bt|btc|btr|bts|cmova|cmovae|cmovb|cmovbe|cmovc|cmove|cmovg|cmovge|cmovl|cmovle|cmovna|cmovnae|cmovnb|cmovnbe|cmovnc|cmovne|cmovng|cmovnge|cmovnl|cmovnle|cmovno|cmovnp|cmovns|cmovnz|cmovo|cmovp|cmovpe|cmovpo|cmovs|cmovz|cmp|comisd|comiss|crc32|cvtdq2pd|cvtdq2ps|cvtpd2dq|cvtpd2ps|cvtpi2pd|cvtpi2ps|cvtps2dq|cvtps2pd|cvtsd2si|cvtsd2ss|cvtsi2sd|cvtsi2ss|cvtss2sd|cvtss2si|cvttpd2dq|cvttps2dq|cvttsd2si|cvttss2si|divpd|divps|divsd|divss|extrq|fadd|faddp|fcmovb|fcmovbe|fcmove|fcmovnb|fcmovnbe|fcmovne|fcmovnu|fcmovu|fcom|fcomi|fcomip|fcomp|fdiv|fdivp|fdivr|fdivrp|fmul|fmulp|fsub|fsubp|fsubr|fsubrp|fucom|fucomi|fucomip|fucomp|fxch|haddpd|haddps|hsubpd|hsubps|imul|insertq|lddqu|lea|lzcnt|maskmovdqu|maxpd|maxps|maxsd|maxss|minpd|minps|minsd|minss|mov|movapd|movaps|movd|movddup|movdqa|movdqu|movhlps|movhpd|movhps|movlhps|movlpd|movlps|movmskpd|movmskps|movntdq|movntdqa|movnti|movntpd|movntps|movntsd|movntss|movq|movsd|movshdup|movsldup|movss|movsx|movupd|movups|movzx|mulpd|mulps|mulsd|mulss|or|orpd|orps|pabsb|pabsd|pabsw|packssdw|packsswb|packusdw|packuswb|paddb|paddd|paddq|paddsb|paddsw|paddusb|paddusw|paddw|pand|pandn|pavgb|pavgw|pcmpeqb|pcmpeqd|pcmpeqq|pcmpeqw|pcmpgtb|pcmpgtd|pcmpgtq|pcmpgtw|phaddd|phaddsw|phaddw|phminposuw|phsubd|phsubsw|phsubw|pmaddubsw|pmaddwd|pmaxsb|pmaxsd|pmaxsw|pmaxub|pmaxud|pmaxuw|pminsb|pminsd|pminsw|pminub|pminud|pminuw|pmovmskb|pmovsxbd|pmovsxbq|pmovsxbw|pmovsxdq|pmovsxwd|pmovsxwq|pmovzxbd|pmovzxbq|pmovzxbw|pmovzxdq|pmovzxwd|pmovzxwq|pmuldq|pmulhrsw|pmulhuw|pmulhw|pmulld|pmullw|pmuludq|popcnt|por|psadbw|pshufb|psignb|psignd|psignw|pslld|pslldq|psllq|psllw|psrad|psraw|psrld|psrldq|psrlq|psrlw|psubb|psubd|psubq|psubsb|psubsw|psubusb|psubusw|psubw|ptest|punpckhbw|punpckhdq|punpckhqdq|punpckhwd|punpcklbw|punpckldq|punpcklqdq|punpcklwd|pxor|rcl|rcpps|rcpss|rcr|rol|ror|rsqrtps|rsqrtss|sal|sar|sbb|shl|shr|sqrtpd|sqrtps|sqrtsd|sqrtss|sub|subpd|subps|subsd|subss|test|tzcnt|ucomisd|ucomiss|unpckhpd|unpckhps|unpcklpd|unpcklps|vaesimc|vbroadcastf128|vbroadcasti128|vbroadcastsd|vbroadcastss|vcomisd|vcomiss|vcvtdq2pd|vcvtdq2ps|vcvtpd2dq|vcvtpd2ps|vcvtps2dq|vcvtps2pd|vcvtsd2si|vcvtss2si|vcvttpd2dq|vcvttps2dq|vcvttsd2si|vcvttss2si|vlddqu|vmaskmovdqu|vmovapd|vmovaps|vmovd|vmovddup|vmovdqa|vmovdqu|vmovhpd|vmovhps|vmovlpd|vmovlps|vmovmskpd|vmovmskps|vmovntdq|vmovntdqa|vmovntpd|vmovntps|vmovq|vmovsd|vmovshdup|vmovsldup|vmovss|vmovupd|vmovups|vpabsb|vpabsd|vpabsw|vpbroadcastb|vpbroadcastd|vpbroadcastq|vpbroadcastw|vphminposuw|vpmovmskb|vpmovsxbd|vpmovsxbq|vpmovsxbw|vpmovsxdq|vpmovsxwd|vpmovsxwq|vpmovzxbd|vpmovzxbq|vpmovzxbw|vpmovzxdq|vpmovzxwd|vpmovzxwq|vptest|vptestpd|vptestps|vrcpps|vrsqrtps|vsqrtpd|vsqrtps|vsqrtsd|vsqrtss|vucomisd|vucomiss|xchg|xor|xorpd|xorps|aeskeygenassist|andn|bextr|blendpd|blendps|blendvpd|blendvps|bzhi|cmppd|cmpps|cmpsd|cmpss|dppd|dpps|extractps|extrq|imul|insertps|mpsadbw|mulx|palignr|pblendvb|pblendw|pclmulqdq|pcmpestri|pcmpestrm|pcmpistri|pcmpistrm|pdep|pext|pextrb|pextrd|pextrq|pextrw|pinsrb|pinsrd|pinsrq|pinsrw|pshufd|pshufhw|pshuflw|rorx|roundpd|roundps|roundsd|roundss|sarx|shld|shlx|shrd|shrx|shufpd|shufps|vaddpd|vaddps|vaddsd|vaddss|vaddsubpd|vaddsubps|vaesdec|vaesdeclast|vaesenc|vaesenclast|vaeskeygenassist|vandnpd|vandnps|vandpd|vandps|vcvtsd2ss|vcvtsi2sd|vcvtsi2ss|vcvtss2sd|vdivpd|vdivps|vdivsd|vdivss|vextractf128|vextracti128|vextractps|vfmadd132pd|vfmadd132ps|vfmadd132sd|vfmadd132ss|vfmadd213pd|vfmadd213ps|vfmadd213sd|vfmadd213ss|vfmadd231pd|vfmadd231ps|vfmadd231sd|vfmadd231ss|vfmaddsub132pd|vfmaddsub132ps|vfmaddsub213pd|vfmaddsub213ps|vfmaddsub231pd|vfmaddsub231ps|vfmsub132pd|vfmsub132ps|vfmsub132sd|vfmsub132ss|vfmsub213pd|vfmsub213ps|vfmsub213sd|vfmsub213ss|vfmsub231pd|vfmsub231ps|vfmsub231sd|vfmsub231ss|vfmsubadd132pd|vfmsubadd132ps|vfmsubadd213pd|vfmsubadd213ps|vfmsubadd231pd|vfmsubadd231ps|vfnmadd132pd|vfnmadd132ps|vfnmadd132sd|vfnmadd132ss|vfnmadd213pd|vfnmadd213ps|vfnmadd213sd|vfnmadd213ss|vfnmadd231pd|vfnmadd231ps|vfnmadd231sd|vfnmadd231ss|vfnmsub132pd|vfnmsub132ps|vfnmsub132sd|vfnmsub132ss|vfnmsub213pd|vfnmsub213ps|vfnmsub213sd|vfnmsub213ss|vfnmsub231pd|vfnmsub231ps|vfnmsub231sd|vfnmsub231ss|vhaddpd|vhaddps|vhsubpd|vhsubps|vmaskmovpd|vmaskmovps|vmaxpd|vmaxps|vmaxsd|vmaxss|vminpd|vminps|vminsd|vminss|vmovhlps|vmovhpd|vmovhps|vmovlhps|vmovlpd|vmovlps|vmovsd|vmovss|vmulpd|vmulps|vmulsd|vmulss|vorpd|vorps|vpackssdw|vpacksswb|vpackusdw|vpackuswb|vpaddb|vpaddd|vpaddq|vpaddsb|vpaddsw|vpaddusb|vpaddusw|vpaddw|vpand|vpandn|vpavgb|vpavgw|vpcmpeqb|vpcmpeqd|vpcmpeqq|vpcmpeqw|vpcmpestri|vpcmpestrm|vpcmpgtb|vpcmpgtd|vpcmpgtq|vpcmpgtw|vpcmpistri|vpcmpistrm|vpermd|vpermilpd|vpermilps|vpermpd|vpermps|vpermq|vpextrb|vpextrd|vpextrq|vpextrw|vphaddd|vphaddsw|vphaddw|vphsubd|vphsubsw|vphsubw|vpmaddubsw|vpmaddwd|vpmaskmovd|vpmaskmovq|vpmaxsb|vpmaxsd|vpmaxsw|vpmaxub|vpmaxud|vpmaxuw|vpminsb|vpminsd|vpminsw|vpminub|vpminud|vpminuw|vpmuldq|vpmulhrsw|vpmulhuw|vpmulhw|vpmulld|vpmullw|vpmuludq|vpor|vpsadbw|vpshufb|vpshufd|vpshufhw|vpshuflw|vpsignb|vpsignd|vpsignw|vpslld|vpslldq|vpsllq|vpsllvd|vpsllvq|vpsllw|vpsrad|vpsravd|vpsraw|vpsrld|vpsrldq|vpsrlq|vpsrlvd|vpsrlvq|vpsrlw|vpsubb|vpsubd|vpsubq|vpsubsb|vpsubsw|vpsubusb|vpsubusw|vpsubw|vpunpckhbw|vpunpckhdq|vpunpckhqdq|vpunpckhwd|vpunpcklbw|vpunpckldq|vpunpcklqdq|vpunpcklwd|vpxor|vrcpss|vroundpd|vroundps|vrsqrtss|vsubpd|vsubps|vsubsd|vsubss|vunpckhpd|vunpckhps|vunpcklpd|vunpcklps|vxorpd|vxorps|insertq|vblendpd|vblendps|vblendvpd|vblendvps|vcmppd|vcmpps|vcmpsd|vcmpss|vdppd|vdpps|vinsertf128|vinserti128|vinsertps|vmpsadbw|vpalignr|vpblendd|vpblendvb|vpblendw|vpclmulqdq|vperm2f128|vperm2i128|vpinsrb|vpinsrd|vpinsrq|vpinsrw|vroundsd|vroundss|vshufpd|vshufps|mov64)\\b(.*)",
            "captures": {
                "1": {
                    "name": "entity.name.function.dasc"
                },
                "2": {
                    "patterns": [
                        {
                            "include": "#dasc-arg"
                        }
                    ]
                }
            }
        },
        "dasc-macro": {
            "match": "^[ \t]*\\|[ \t]*\\.\\b(macro|define)\\b[ \t]*([a-zA-Z_][a-zA-Z0-9_]*)((?:[ \t]*,.*)*)",
            "captures": {
                "1": {
                    "name": "keyword.control.dasc"
                },
                "2": {
                    "name": "entity.name.function.dasc"
                },
                "3": {
                    "include": "#dasc-arg"
                }
            }
        },
        "dasc-endmacro": {
            "match": "^[ \t]*\\|[ \t]*\\.\\b(endmacro|endif)\\b",
            "captures": {
                "1": {
                    "name": "keyword.control.dasc"
                }
            }
        },
        "dasc-dmacro": {
            "match": "^[ \t]*\\|[ \t]*\\.\\b(actionlist|align|arch|capture|dumpcapture|dword|elif|else|error|externnames|fatal|globalnames|globals|if|include|nop|section|space|type|code|byte|dword|long|quad|qword|sbyte|word|aword)\\b(.*)",
            "captures": {
                "1": {
                    "name": "keyword.control.dasc"
                },
                "2": {
                    "include": "#dasc-dasc-arg"
                }
            }
        },
		"access-method": {
			"name": "meta.function-call.member.dasc",
			"begin": "([a-zA-Z_][a-zA-Z_0-9]*|(?<=[\\]\\)]))\\s*(?:(\\.)|(->))((?:(?:[a-zA-Z_][a-zA-Z_0-9]*)\\s*(?:(?:\\.)|(?:->)))*)\\s*([a-zA-Z_][a-zA-Z_0-9]*)(\\()",
			"beginCaptures": {
				"1": {
					"name": "variable.object.dasc"
				},
				"2": {
					"name": "punctuation.separator.dot-access.dasc"
				},
				"3": {
					"name": "punctuation.separator.pointer-access.dasc"
				},
				"4": {
					"patterns": [
						{
							"match": "\\.",
							"name": "punctuation.separator.dot-access.dasc"
						},
						{
							"match": "->",
							"name": "punctuation.separator.pointer-access.dasc"
						},
						{
							"match": "[a-zA-Z_][a-zA-Z_0-9]*",
							"name": "variable.object.dasc"
						},
						{
							"name": "everything.else.dasc",
							"match": ".+"
						}
					]
				},
				"5": {
					"name": "entity.name.function.member.dasc"
				},
				"6": {
					"name": "punctuation.section.arguments.begin.bracket.round.function.member.dasc"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.arguments.end.bracket.round.function.member.dasc"
				}
			},
			"patterns": [
				{
					"include": "#function-call-innards"
				}
			]
		},
		"anon_pattern_1": {
			"match": "\\b(break|continue|do|else|for|goto|if|_Pragma|return|while)\\b",
			"name": "keyword.control.dasc"
		},
		"anon_pattern_10": {
			"match": "(?x) \\b\n(int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|int_least8_t\n|int_least16_t|int_least32_t|int_least64_t|uint_least8_t|uint_least16_t|uint_least32_t\n|uint_least64_t|int_fast8_t|int_fast16_t|int_fast32_t|int_fast64_t|uint_fast8_t\n|uint_fast16_t|uint_fast32_t|uint_fast64_t|intptr_t|uintptr_t|intmax_t|intmax_t\n|uintmax_t|uintmax_t)\n\\b",
			"name": "support.type.stdint.dasc"
		},
		"anon_pattern_11": {
			"match": "\\b(noErr|kNilOptions|kInvalidID|kVariableLengthArray)\\b",
			"name": "support.constant.mac-classic.dasc"
		},
		"anon_pattern_12": {
			"match": "(?x) \\b\n(AbsoluteTime|Boolean|Byte|ByteCount|ByteOffset|BytePtr|CompTimeValue|ConstLogicalAddress|ConstStrFileNameParam\n|ConstStringPtr|Duration|Fixed|FixedPtr|Float32|Float32Point|Float64|Float80|Float96|FourCharCode|Fract|FractPtr\n|Handle|ItemCount|LogicalAddress|OptionBits|OSErr|OSStatus|OSType|OSTypePtr|PhysicalAddress|ProcessSerialNumber\n|ProcessSerialNumberPtr|ProcHandle|Ptr|ResType|ResTypePtr|ShortFixed|ShortFixedPtr|SignedByte|SInt16|SInt32|SInt64\n|SInt8|Size|StrFileName|StringHandle|StringPtr|TimeBase|TimeRecord|TimeScale|TimeValue|TimeValue64|UInt16|UInt32\n|UInt64|UInt8|UniChar|UniCharCount|UniCharCountPtr|UniCharPtr|UnicodeScalarValue|UniversalProcHandle|UniversalProcPtr\n|UnsignedFixed|UnsignedFixedPtr|UnsignedWide|UTF16Char|UTF32Char|UTF8Char)\n\\b",
			"name": "support.type.mac-classic.dasc"
		},
		"anon_pattern_13": {
			"match": "\\b([A-Za-z0-9_]+_t)\\b",
			"name": "support.type.posix-reserved.dasc"
		},
		"anon_pattern_14": {
			"match": ";",
			"name": "punctuation.terminator.statement.dasc"
		},
		"anon_pattern_15": {
			"match": ",",
			"name": "punctuation.separator.delimiter.dasc"
		},
		"anon_pattern_2": {
			"match": "typedef",
			"name": "keyword.other.typedef.dasc"
		},
		"anon_pattern_3": {
			"match": "\\b(const|extern|register|restrict|static|volatile|inline)\\b",
			"name": "storage.modifier.dasc"
		},
		"anon_pattern_4": {
			"match": "\\bk[A-Z]\\w*\\b",
			"name": "constant.other.variable.mac-classic.dasc"
		},
		"anon_pattern_5": {
			"match": "\\bg[A-Z]\\w*\\b",
			"name": "variable.other.readwrite.global.mac-classic.dasc"
		},
		"anon_pattern_6": {
			"match": "\\bs[A-Z]\\w*\\b",
			"name": "variable.other.readwrite.static.mac-classic.dasc"
		},
		"anon_pattern_7": {
			"match": "\\b(NULL|true|false|TRUE|FALSE)\\b",
			"name": "constant.language.dasc"
		},
		"anon_pattern_8": {
			"match": "\\b(u_char|u_short|u_int|u_long|ushort|uint|u_quad_t|quad_t|qaddr_t|caddr_t|daddr_t|div_t|dev_t|fixpt_t|blkcnt_t|blksize_t|gid_t|in_addr_t|in_port_t|ino_t|key_t|mode_t|nlink_t|id_t|pid_t|off_t|segsz_t|swblk_t|uid_t|id_t|clock_t|size_t|ssize_t|time_t|useconds_t|suseconds_t)\\b",
			"name": "support.type.sys-types.dasc"
		},
		"anon_pattern_9": {
			"match": "\\b(pthread_attr_t|pthread_cond_t|pthread_condattr_t|pthread_mutex_t|pthread_mutexattr_t|pthread_once_t|pthread_rwlock_t|pthread_rwlockattr_t|pthread_t|pthread_key_t)\\b",
			"name": "support.type.pthread.dasc"
		},
		"anon_pattern_range_1": {
			"name": "meta.preprocessor.macro.dasc",
			"begin": "((?:(?:(?>\\s+)|(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/)))+?|(?:(?:(?:(?:\\b|(?<=\\W))|(?=\\W))|\\A)|\\Z)))((#)\\s*define\\b)\\s+((?<!\\w)[a-zA-Z_]\\w*(?!\\w))(?:(\\()([^()\\\\]+)(\\)))?",
			"beginCaptures": {
				"1": {
					"patterns": [
						{
							"include": "#inline_comment"
						}
					]
				},
				"2": {
					"name": "comment.block.c punctuation.definition.comment.begin.dasc"
				},
				"3": {
					"name": "comment.block.dasc"
				},
				"4": {
					"patterns": [
						{
							"match": "\\*\\/",
							"name": "comment.block.c punctuation.definition.comment.end.dasc"
						},
						{
							"match": "\\*",
							"name": "comment.block.dasc"
						}
					]
				},
				"5": {
					"name": "keyword.control.directive.define.dasc"
				},
				"6": {
					"name": "punctuation.definition.directive.dasc"
				},
				"7": {
					"name": "entity.name.function.preprocessor.dasc"
				},
				"8": {
					"name": "punctuation.definition.parameters.begin.dasc"
				},
				"9": {
					"patterns": [
						{
							"match": "(?<=[(,])\\s*((?<!\\w)[a-zA-Z_]\\w*(?!\\w))\\s*",
							"captures": {
								"1": {
									"name": "variable.parameter.preprocessor.dasc"
								}
							}
						},
						{
							"match": ",",
							"name": "punctuation.separator.parameters.dasc"
						},
						{
							"match": "\\.\\.\\.",
							"name": "ellipses.c punctuation.vararg-ellipses.variable.parameter.preprocessor.dasc"
						}
					]
				},
				"10": {
					"name": "punctuation.definition.parameters.end.dasc"
				}
			},
			"end": "(?<!\\\\)(?=\\n)",
			"patterns": [
				{
					"include": "#preprocessor-rule-define-line-contents"
				}
			]
		},
		"anon_pattern_range_2": {
			"begin": "^\\s*((#)\\s*(error|warning))\\b\\s*",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.directive.diagnostic.$3.dasc"
				},
				"2": {
					"name": "punctuation.definition.directive.dasc"
				}
			},
			"end": "(?<!\\\\)(?=\\n)",
			"name": "meta.preprocessor.diagnostic.dasc",
			"patterns": [
				{
					"begin": "\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.dasc"
						}
					},
					"end": "\"|(?<!\\\\)(?=\\s*\\n)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.dasc"
						}
					},
					"name": "string.quoted.double.dasc",
					"patterns": [
						{
							"include": "#line_continuation_character"
						}
					]
				},
				{
					"begin": "'",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.dasc"
						}
					},
					"end": "'|(?<!\\\\)(?=\\s*\\n)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.dasc"
						}
					},
					"name": "string.quoted.single.dasc",
					"patterns": [
						{
							"include": "#line_continuation_character"
						}
					]
				},
				{
					"begin": "[^'\"]",
					"end": "(?<!\\\\)(?=\\s*\\n)",
					"name": "string.unquoted.single.dasc",
					"patterns": [
						{
							"include": "#line_continuation_character"
						},
						{
							"include": "#comments"
						}
					]
				}
			]
		},
		"anon_pattern_range_3": {
			"begin": "^\\s*((#)\\s*(include(?:_next)?|import))\\b\\s*",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.directive.$3.dasc"
				},
				"2": {
					"name": "punctuation.definition.directive.dasc"
				}
			},
			"end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
			"name": "meta.preprocessor.include.dasc",
			"patterns": [
				{
					"include": "#line_continuation_character"
				},
				{
					"begin": "\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.dasc"
						}
					},
					"end": "\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.dasc"
						}
					},
					"name": "string.quoted.double.include.dasc"
				},
				{
					"begin": "<",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.dasc"
						}
					},
					"end": ">",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.dasc"
						}
					},
					"name": "string.quoted.other.lt-gt.include.dasc"
				}
			]
		},
		"anon_pattern_range_4": {
			"begin": "^\\s*((#)\\s*line)\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.directive.line.dasc"
				},
				"2": {
					"name": "punctuation.definition.directive.dasc"
				}
			},
			"end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
			"name": "meta.preprocessor.dasc",
			"patterns": [
				{
					"include": "#strings"
				},
				{
					"include": "#numbers"
				},
				{
					"include": "#line_continuation_character"
				}
			]
		},
		"anon_pattern_range_5": {
			"begin": "^\\s*(?:((#)\\s*undef))\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.directive.undef.dasc"
				},
				"2": {
					"name": "punctuation.definition.directive.dasc"
				}
			},
			"end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
			"name": "meta.preprocessor.dasc",
			"patterns": [
				{
					"match": "[a-zA-Z_$][\\w$]*",
					"name": "entity.name.function.preprocessor.dasc"
				},
				{
					"include": "#line_continuation_character"
				}
			]
		},
		"anon_pattern_range_6": {
			"begin": "^\\s*(?:((#)\\s*pragma))\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.directive.pragma.dasc"
				},
				"2": {
					"name": "punctuation.definition.directive.dasc"
				}
			},
			"end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
			"name": "meta.preprocessor.pragma.dasc",
			"patterns": [
				{
					"include": "#strings"
				},
				{
					"match": "[a-zA-Z_$][\\w\\-$]*",
					"name": "entity.other.attribute-name.pragma.preprocessor.dasc"
				},
				{
					"include": "#numbers"
				},
				{
					"include": "#line_continuation_character"
				}
			]
		},
		"anon_pattern_range_7": {
			"name": "meta.function.dasc",
			"begin": "(?<!\\w)(?!\\s*(?:atomic_uint_least64_t|atomic_uint_least16_t|atomic_uint_least32_t|atomic_uint_least8_t|atomic_int_least16_t|atomic_uint_fast64_t|atomic_uint_fast32_t|atomic_int_least64_t|atomic_int_least32_t|pthread_rwlockattr_t|atomic_uint_fast16_t|pthread_mutexattr_t|atomic_int_fast16_t|atomic_uint_fast8_t|atomic_int_fast64_t|atomic_int_least8_t|atomic_int_fast32_t|atomic_int_fast8_t|pthread_condattr_t|pthread_rwlock_t|atomic_uintptr_t|atomic_ptrdiff_t|atomic_uintmax_t|atomic_intmax_t|atomic_char32_t|atomic_intptr_t|atomic_char16_t|pthread_mutex_t|pthread_cond_t|atomic_wchar_t|uint_least64_t|uint_least32_t|uint_least16_t|pthread_once_t|pthread_attr_t|uint_least8_t|int_least32_t|int_least16_t|pthread_key_t|uint_fast32_t|uint_fast64_t|uint_fast16_t|atomic_size_t|atomic_ushort|atomic_ullong|int_least64_t|atomic_ulong|int_least8_t|int_fast16_t|int_fast32_t|int_fast64_t|uint_fast8_t|memory_order|atomic_schar|atomic_uchar|atomic_short|atomic_llong|thread_local|atomic_bool|atomic_uint|atomic_long|int_fast8_t|suseconds_t|atomic_char|atomic_int|useconds_t|_Imaginary|uintmax_t|uintmax_t|in_addr_t|in_port_t|_Noreturn|blksize_t|pthread_t|uintptr_t|volatile|u_quad_t|blkcnt_t|intmax_t|intptr_t|_Complex|uint16_t|uint32_t|uint64_t|_Alignof|_Alignas|continue|unsigned|restrict|intmax_t|register|int64_t|qaddr_t|segsz_t|_Atomic|alignas|default|caddr_t|nlink_t|typedef|u_short|fixpt_t|clock_t|swblk_t|ssize_t|alignof|daddr_t|int16_t|int32_t|uint8_t|struct|mode_t|size_t|time_t|ushort|u_long|u_char|int8_t|double|signed|static|extern|inline|return|switch|xor_eq|and_eq|bitand|not_eq|sizeof|quad_t|uid_t|bitor|union|off_t|key_t|ino_t|compl|u_int|short|const|false|while|float|pid_t|break|_Bool|or_eq|div_t|dev_t|gid_t|id_t|long|case|goto|else|bool|auto|id_t|enum|uint|true|NULL|void|char|for|not|int|and|xor|do|or|if)\\s*\\()(?=[a-zA-Z_]\\w*\\s*\\()",
			"end": "(?!\\G)(?<=\\))",
			"patterns": [
				{
					"include": "#function-innards"
				}
			]
		},
		"anon_pattern_range_8": {
			"name": "meta.bracket.square.access.dasc",
			"begin": "([a-zA-Z_][a-zA-Z_0-9]*|(?<=[\\]\\)]))?(\\[)(?!\\])",
			"beginCaptures": {
				"1": {
					"name": "variable.object.dasc"
				},
				"2": {
					"name": "punctuation.definition.begin.bracket.square.dasc"
				}
			},
			"end": "\\]",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.end.bracket.square.dasc"
				}
			},
			"patterns": [
				{
					"include": "#function-call-innards"
				}
			]
		},
		"anon_pattern_range_9": {
			"name": "storage.modifier.array.bracket.square.dasc",
			"match": "\\[\\s*\\]"
		},
		"backslash_escapes": {
			"match": "(?x)\\\\ (\n\\\\\t\t\t |\n[abefnprtv'\"?]   |\n[0-3][0-7]{,2}\t |\n[4-7]\\d?\t\t|\nx[a-fA-F0-9]{,2} |\nu[a-fA-F0-9]{,4} |\nU[a-fA-F0-9]{,8} )",
			"name": "constant.character.escape.dasc"
		},
		"block": {
			"patterns": [
				{
					"begin": "{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.block.begin.bracket.curly.dasc"
						}
					},
					"end": "}|(?=\\s*#\\s*(?:elif|else|endif)\\b)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.block.end.bracket.curly.dasc"
						}
					},
					"name": "meta.block.dasc",
					"patterns": [
						{
							"include": "#block_innards"
						}
					]
				}
			]
		},
		"block_comment": {
			"patterns": [
				{
					"begin": "\\s*+(\\/\\*)",
					"end": "\\*\\/",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.comment.begin.dasc"
						}
					},
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.end.dasc"
						}
					},
					"name": "comment.block.dasc"
				},
				{
					"begin": "\\s*+(\\/\\*)",
					"end": "\\*\\/",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.comment.begin.dasc"
						}
					},
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.end.dasc"
						}
					},
					"name": "comment.block.dasc"
				}
			]
		},
		"block_innards": {
			"patterns": [
				{
					"include": "#preprocessor-rule-enabled-block"
				},
				{
					"include": "#preprocessor-rule-disabled-block"
				},
				{
					"include": "#preprocessor-rule-conditional-block"
				},
				{
					"include": "#method_access"
				},
				{
					"include": "#member_access"
				},
				{
					"include": "#c_function_call"
				},
				{
					"name": "meta.initialization.dasc",
					"begin": "(?x)\n(?:\n  (?:\n\t(?=\\s)(?<!else|new|return)\n\t(?<=\\w) \\s+(and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq|alignof|alignas)  # or word + space before name\n  )\n)\n(\n  (?:[A-Za-z_][A-Za-z0-9_]*+ | :: )++   # actual name\n  |\n  (?:(?<=operator) (?:[-*&<>=+!]+ | \\(\\) | \\[\\]))\n)\n\\s*(\\() # opening bracket",
					"beginCaptures": {
						"1": {
							"name": "variable.other.dasc"
						},
						"2": {
							"name": "punctuation.section.parens.begin.bracket.round.initialization.dasc"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.parens.end.bracket.round.initialization.dasc"
						}
					},
					"patterns": [
						{
							"include": "#function-call-innards"
						}
					]
				},
				{
					"begin": "{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.block.begin.bracket.curly.dasc"
						}
					},
					"end": "}|(?=\\s*#\\s*(?:elif|else|endif)\\b)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.block.end.bracket.curly.dasc"
						}
					},
					"patterns": [
						{
							"include": "#block_innards"
						}
					]
				},
				{
					"include": "#parens-block"
				},
				{
					"include": "$self"
				}
			]
		},
		"c_conditional_context": {
			"patterns": [
				{
					"include": "$self"
				},
				{
					"include": "#block_innards"
				}
			]
		},
		"c_function_call": {
			"begin": "(?x)\n(?!(?:while|for|do|if|else|switch|catch|enumerate|return|typeid|alignof|alignas|sizeof|[cr]?iterate|and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq|alignof|alignas)\\s*\\()\n(?=\n(?:[A-Za-z_][A-Za-z0-9_]*+|::)++\\s*\\(  # actual name\n|\n(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\\s*\\(\n)",
			"end": "(?<=\\))(?!\\w)",
			"name": "meta.function-call.dasc",
			"patterns": [
				{
					"include": "#function-call-innards"
				}
			]
		},
		"case_statement": {
			"name": "meta.conditional.case.dasc",
			"begin": "((?>(?:(?:(?>(?<!\\s)\\s+)|(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/)))+|(?:(?:(?:(?:\\b|(?<=\\W))|(?=\\W))|\\A)|\\Z))))((?<!\\w)case(?!\\w))",
			"beginCaptures": {
				"1": {
					"patterns": [
						{
							"include": "#inline_comment"
						}
					]
				},
				"2": {
					"name": "comment.block.c punctuation.definition.comment.begin.dasc"
				},
				"3": {
					"name": "comment.block.dasc"
				},
				"4": {
					"patterns": [
						{
							"match": "\\*\\/",
							"name": "comment.block.c punctuation.definition.comment.end.dasc"
						},
						{
							"match": "\\*",
							"name": "comment.block.dasc"
						}
					]
				},
				"5": {
					"name": "keyword.control.case.dasc"
				}
			},
			"end": "(:)",
			"endCaptures": {
				"1": {
					"name": "punctuation.separator.colon.case.dasc"
				}
			},
			"patterns": [
				{
					"include": "#evaluation_context"
				},
				{
					"include": "#c_conditional_context"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"patterns": [
						{
							"patterns": [
								{
									"name": "comment.line.double-slash.documentation.dasc",
									"begin": "(?:^)(?>\\s*)(\\/\\/[!\\/]+)",
									"beginCaptures": {
										"1": {
											"name": "punctuation.definition.comment.documentation.dasc"
										}
									},
									"end": "(?<=\\n)(?<!\\\\\\n)",
									"patterns": [
										{
											"include": "#line_continuation_character"
										},
										{
											"match": "(?<=[\\s*!\\/])[\\\\@](?:callergraph|callgraph|else|endif|f\\$|f\\[|f\\]|hidecallergraph|hidecallgraph|hiderefby|hiderefs|hideinitializer|htmlinclude|n|nosubgrouping|private|privatesection|protected|protectedsection|public|publicsection|pure|showinitializer|showrefby|showrefs|tableofcontents|\\$|\\#|<|>|%|\"|\\.|=|::|\\||\\-\\-|\\-\\-\\-)\\b(?:\\{[^}]*\\})?",
											"name": "storage.type.class.doxygen.dasc"
										},
										{
											"match": "((?<=[\\s*!\\/])[\\\\@](?:a|em|e))\\s+(\\S+)",
											"captures": {
												"1": {
													"name": "storage.type.class.doxygen.dasc"
												},
												"2": {
													"name": "markup.italic.doxygen.dasc"
												}
											}
										},
										{
											"match": "((?<=[\\s*!\\/])[\\\\@]b)\\s+(\\S+)",
											"captures": {
												"1": {
													"name": "storage.type.class.doxygen.dasc"
												},
												"2": {
													"name": "markup.bold.doxygen.dasc"
												}
											}
										},
										{
											"match": "((?<=[\\s*!\\/])[\\\\@](?:c|p))\\s+(\\S+)",
											"captures": {
												"1": {
													"name": "storage.type.class.doxygen.dasc"
												},
												"2": {
													"name": "markup.inline.raw.string.dasc"
												}
											}
										},
										{
											"match": "(?<=[\\s*!\\/])[\\\\@](?:a|anchor|b|c|cite|copybrief|copydetail|copydoc|def|dir|dontinclude|e|em|emoji|enum|example|extends|file|idlexcept|implements|include|includedoc|includelineno|latexinclude|link|memberof|namespace|p|package|ref|refitem|related|relates|relatedalso|relatesalso|verbinclude)\\b(?:\\{[^}]*\\})?",
											"name": "storage.type.class.doxygen.dasc"
										},
										{
											"match": "(?<=[\\s*!\\/])[\\\\@](?:addindex|addtogroup|category|class|defgroup|diafile|dotfile|elseif|fn|headerfile|if|ifnot|image|ingroup|interface|line|mainpage|mscfile|name|overload|page|property|protocol|section|skip|skipline|snippet|snippetdoc|snippetlineno|struct|subpage|subsection|subsubsection|typedef|union|until|vhdlflow|weakgroup)\\b(?:\\{[^}]*\\})?",
											"name": "storage.type.class.doxygen.dasc"
										},
										{
											"match": "((?<=[\\s*!\\/])[\\\\@]param)(?:\\s*\\[((?:,?\\s*(?:in|out)\\s*)+)\\])?\\s+(\\b\\w+\\b)",
											"captures": {
												"1": {
													"name": "storage.type.class.doxygen.dasc"
												},
												"2": {
													"patterns": [
														{
															"match": "in|out",
															"name": "keyword.other.parameter.direction.$0.dasc"
														}
													]
												},
												"3": {
													"name": "variable.parameter.dasc"
												}
											}
										},
										{
											"match": "(?<=[\\s*!\\/])[\\\\@](?:arg|attention|author|authors|brief|bug|copyright|date|deprecated|details|exception|invariant|li|note|par|paragraph|param|post|pre|remark|remarks|result|return|returns|retval|sa|see|short|since|test|throw|todo|tparam|version|warning|xrefitem)\\b(?:\\{[^}]*\\})?",
											"name": "storage.type.class.doxygen.dasc"
										},
										{
											"match": "(?<=[\\s*!\\/])[\\\\@](?:code|cond|docbookonly|dot|htmlonly|internal|latexonly|link|manonly|msc|parblock|rtfonly|secreflist|uml|verbatim|xmlonly|endcode|endcond|enddocbookonly|enddot|endhtmlonly|endinternal|endlatexonly|endlink|endmanonly|endmsc|endparblock|endrtfonly|endsecreflist|enduml|endverbatim|endxmlonly)\\b(?:\\{[^}]*\\})?",
											"name": "storage.type.class.doxygen.dasc"
										},
										{
											"match": "(?:\\b[A-Z]+:|@[a-z_]+:)",
											"name": "storage.type.class.gtkdoc"
										}
									]
								},
								{
									"match": "(\\/\\*[!*]+(?=\\s))(.+)([!*]*\\*\\/)",
									"captures": {
										"1": {
											"name": "punctuation.definition.comment.begin.documentation.dasc"
										},
										"2": {
											"patterns": [
												{
													"match": "(?<=[\\s*!\\/])[\\\\@](?:callergraph|callgraph|else|endif|f\\$|f\\[|f\\]|hidecallergraph|hidecallgraph|hiderefby|hiderefs|hideinitializer|htmlinclude|n|nosubgrouping|private|privatesection|protected|protectedsection|public|publicsection|pure|showinitializer|showrefby|showrefs|tableofcontents|\\$|\\#|<|>|%|\"|\\.|=|::|\\||\\-\\-|\\-\\-\\-)\\b(?:\\{[^}]*\\})?",
													"name": "storage.type.class.doxygen.dasc"
												},
												{
													"match": "((?<=[\\s*!\\/])[\\\\@](?:a|em|e))\\s+(\\S+)",
													"captures": {
														"1": {
															"name": "storage.type.class.doxygen.dasc"
														},
														"2": {
															"name": "markup.italic.doxygen.dasc"
														}
													}
												},
												{
													"match": "((?<=[\\s*!\\/])[\\\\@]b)\\s+(\\S+)",
													"captures": {
														"1": {
															"name": "storage.type.class.doxygen.dasc"
														},
														"2": {
															"name": "markup.bold.doxygen.dasc"
														}
													}
												},
												{
													"match": "((?<=[\\s*!\\/])[\\\\@](?:c|p))\\s+(\\S+)",
													"captures": {
														"1": {
															"name": "storage.type.class.doxygen.dasc"
														},
														"2": {
															"name": "markup.inline.raw.string.dasc"
														}
													}
												},
												{
													"match": "(?<=[\\s*!\\/])[\\\\@](?:a|anchor|b|c|cite|copybrief|copydetail|copydoc|def|dir|dontinclude|e|em|emoji|enum|example|extends|file|idlexcept|implements|include|includedoc|includelineno|latexinclude|link|memberof|namespace|p|package|ref|refitem|related|relates|relatedalso|relatesalso|verbinclude)\\b(?:\\{[^}]*\\})?",
													"name": "storage.type.class.doxygen.dasc"
												},
												{
													"match": "(?<=[\\s*!\\/])[\\\\@](?:addindex|addtogroup|category|class|defgroup|diafile|dotfile|elseif|fn|headerfile|if|ifnot|image|ingroup|interface|line|mainpage|mscfile|name|overload|page|property|protocol|section|skip|skipline|snippet|snippetdoc|snippetlineno|struct|subpage|subsection|subsubsection|typedef|union|until|vhdlflow|weakgroup)\\b(?:\\{[^}]*\\})?",
													"name": "storage.type.class.doxygen.dasc"
												},
												{
													"match": "((?<=[\\s*!\\/])[\\\\@]param)(?:\\s*\\[((?:,?\\s*(?:in|out)\\s*)+)\\])?\\s+(\\b\\w+\\b)",
													"captures": {
														"1": {
															"name": "storage.type.class.doxygen.dasc"
														},
														"2": {
															"patterns": [
																{
																	"match": "in|out",
																	"name": "keyword.other.parameter.direction.$0.dasc"
																}
															]
														},
														"3": {
															"name": "variable.parameter.dasc"
														}
													}
												},
												{
													"match": "(?<=[\\s*!\\/])[\\\\@](?:arg|attention|author|authors|brief|bug|copyright|date|deprecated|details|exception|invariant|li|note|par|paragraph|param|post|pre|remark|remarks|result|return|returns|retval|sa|see|short|since|test|throw|todo|tparam|version|warning|xrefitem)\\b(?:\\{[^}]*\\})?",
													"name": "storage.type.class.doxygen.dasc"
												},
												{
													"match": "(?<=[\\s*!\\/])[\\\\@](?:code|cond|docbookonly|dot|htmlonly|internal|latexonly|link|manonly|msc|parblock|rtfonly|secreflist|uml|verbatim|xmlonly|endcode|endcond|enddocbookonly|enddot|endhtmlonly|endinternal|endlatexonly|endlink|endmanonly|endmsc|endparblock|endrtfonly|endsecreflist|enduml|endverbatim|endxmlonly)\\b(?:\\{[^}]*\\})?",
													"name": "storage.type.class.doxygen.dasc"
												},
												{
													"match": "(?:\\b[A-Z]+:|@[a-z_]+:)",
													"name": "storage.type.class.gtkdoc"
												}
											]
										},
										"3": {
											"name": "punctuation.definition.comment.end.documentation.dasc"
										}
									},
									"name": "comment.block.documentation.dasc"
								},
								{
									"name": "comment.block.documentation.dasc",
									"begin": "((?>\\s*)\\/\\*[!*]+(?:(?:\\n|$)|(?=\\s)))",
									"beginCaptures": {
										"1": {
											"name": "punctuation.definition.comment.begin.documentation.dasc"
										}
									},
									"end": "([!*]*\\*\\/)",
									"endCaptures": {
										"1": {
											"name": "punctuation.definition.comment.end.documentation.dasc"
										}
									},
									"patterns": [
										{
											"match": "(?<=[\\s*!\\/])[\\\\@](?:callergraph|callgraph|else|endif|f\\$|f\\[|f\\]|hidecallergraph|hidecallgraph|hiderefby|hiderefs|hideinitializer|htmlinclude|n|nosubgrouping|private|privatesection|protected|protectedsection|public|publicsection|pure|showinitializer|showrefby|showrefs|tableofcontents|\\$|\\#|<|>|%|\"|\\.|=|::|\\||\\-\\-|\\-\\-\\-)\\b(?:\\{[^}]*\\})?",
											"name": "storage.type.class.doxygen.dasc"
										},
										{
											"match": "((?<=[\\s*!\\/])[\\\\@](?:a|em|e))\\s+(\\S+)",
											"captures": {
												"1": {
													"name": "storage.type.class.doxygen.dasc"
												},
												"2": {
													"name": "markup.italic.doxygen.dasc"
												}
											}
										},
										{
											"match": "((?<=[\\s*!\\/])[\\\\@]b)\\s+(\\S+)",
											"captures": {
												"1": {
													"name": "storage.type.class.doxygen.dasc"
												},
												"2": {
													"name": "markup.bold.doxygen.dasc"
												}
											}
										},
										{
											"match": "((?<=[\\s*!\\/])[\\\\@](?:c|p))\\s+(\\S+)",
											"captures": {
												"1": {
													"name": "storage.type.class.doxygen.dasc"
												},
												"2": {
													"name": "markup.inline.raw.string.dasc"
												}
											}
										},
										{
											"match": "(?<=[\\s*!\\/])[\\\\@](?:a|anchor|b|c|cite|copybrief|copydetail|copydoc|def|dir|dontinclude|e|em|emoji|enum|example|extends|file|idlexcept|implements|include|includedoc|includelineno|latexinclude|link|memberof|namespace|p|package|ref|refitem|related|relates|relatedalso|relatesalso|verbinclude)\\b(?:\\{[^}]*\\})?",
											"name": "storage.type.class.doxygen.dasc"
										},
										{
											"match": "(?<=[\\s*!\\/])[\\\\@](?:addindex|addtogroup|category|class|defgroup|diafile|dotfile|elseif|fn|headerfile|if|ifnot|image|ingroup|interface|line|mainpage|mscfile|name|overload|page|property|protocol|section|skip|skipline|snippet|snippetdoc|snippetlineno|struct|subpage|subsection|subsubsection|typedef|union|until|vhdlflow|weakgroup)\\b(?:\\{[^}]*\\})?",
											"name": "storage.type.class.doxygen.dasc"
										},
										{
											"match": "((?<=[\\s*!\\/])[\\\\@]param)(?:\\s*\\[((?:,?\\s*(?:in|out)\\s*)+)\\])?\\s+(\\b\\w+\\b)",
											"captures": {
												"1": {
													"name": "storage.type.class.doxygen.dasc"
												},
												"2": {
													"patterns": [
														{
															"match": "in|out",
															"name": "keyword.other.parameter.direction.$0.dasc"
														}
													]
												},
												"3": {
													"name": "variable.parameter.dasc"
												}
											}
										},
										{
											"match": "(?<=[\\s*!\\/])[\\\\@](?:arg|attention|author|authors|brief|bug|copyright|date|deprecated|details|exception|invariant|li|note|par|paragraph|param|post|pre|remark|remarks|result|return|returns|retval|sa|see|short|since|test|throw|todo|tparam|version|warning|xrefitem)\\b(?:\\{[^}]*\\})?",
											"name": "storage.type.class.doxygen.dasc"
										},
										{
											"match": "(?<=[\\s*!\\/])[\\\\@](?:code|cond|docbookonly|dot|htmlonly|internal|latexonly|link|manonly|msc|parblock|rtfonly|secreflist|uml|verbatim|xmlonly|endcode|endcond|enddocbookonly|enddot|endhtmlonly|endinternal|endlatexonly|endlink|endmanonly|endmsc|endparblock|endrtfonly|endsecreflist|enduml|endverbatim|endxmlonly)\\b(?:\\{[^}]*\\})?",
											"name": "storage.type.class.doxygen.dasc"
										},
										{
											"match": "(?:\\b[A-Z]+:|@[a-z_]+:)",
											"name": "storage.type.class.gtkdoc"
										}
									]
								},
								{
									"match": "^\\/\\* =(\\s*.*?)\\s*= \\*\\/$\\n?",
									"captures": {
										"1": {
											"name": "meta.toc-list.banner.block.dasc"
										}
									},
									"name": "comment.block.banner.dasc"
								},
								{
									"name": "comment.block.dasc",
									"begin": "(\\/\\*)",
									"beginCaptures": {
										"1": {
											"name": "punctuation.definition.comment.begin.dasc"
										}
									},
									"end": "(\\*\\/)",
									"endCaptures": {
										"1": {
											"name": "punctuation.definition.comment.end.dasc"
										}
									}
								},
								{
									"match": "^\\/\\/ =(\\s*.*?)\\s*=$\\n?",
									"captures": {
										"1": {
											"name": "meta.toc-list.banner.line.dasc"
										}
									},
									"name": "comment.line.banner.dasc"
								},
								{
									"begin": "((?:^[ \\t]+)?)(?=\\/\\/)",
									"beginCaptures": {
										"1": {
											"name": "punctuation.whitespace.comment.leading.dasc"
										}
									},
									"end": "(?!\\G)",
									"patterns": [
										{
											"name": "comment.line.double-slash.dasc",
											"begin": "(\\/\\/)",
											"beginCaptures": {
												"1": {
													"name": "punctuation.definition.comment.dasc"
												}
											},
											"end": "(?=\\n)",
											"patterns": [
												{
													"include": "#line_continuation_character"
												}
											]
										}
									]
								}
							]
						},
						{
							"include": "#block_comment"
						},
						{
							"include": "#line_comment"
						}
					]
				},
				{
					"include": "#block_comment"
				},
				{
					"include": "#line_comment"
				}
			]
		},
		"default_statement": {
			"name": "meta.conditional.case.dasc",
			"begin": "((?>(?:(?:(?>(?<!\\s)\\s+)|(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/)))+|(?:(?:(?:(?:\\b|(?<=\\W))|(?=\\W))|\\A)|\\Z))))((?<!\\w)default(?!\\w))",
			"beginCaptures": {
				"1": {
					"patterns": [
						{
							"include": "#inline_comment"
						}
					]
				},
				"2": {
					"name": "comment.block.c punctuation.definition.comment.begin.dasc"
				},
				"3": {
					"name": "comment.block.dasc"
				},
				"4": {
					"patterns": [
						{
							"match": "\\*\\/",
							"name": "comment.block.c punctuation.definition.comment.end.dasc"
						},
						{
							"match": "\\*",
							"name": "comment.block.dasc"
						}
					]
				},
				"5": {
					"name": "keyword.control.default.dasc"
				}
			},
			"end": "(:)",
			"endCaptures": {
				"1": {
					"name": "punctuation.separator.colon.case.default.dasc"
				}
			},
			"patterns": [
				{
					"include": "#evaluation_context"
				},
				{
					"include": "#c_conditional_context"
				}
			]
		},
		"disabled": {
			"begin": "^\\s*#\\s*if(n?def)?\\b.*$",
			"end": "^\\s*#\\s*endif\\b",
			"patterns": [
				{
					"include": "#disabled"
				},
				{
					"include": "#pragma-mark"
				}
			]
		},
		"evaluation_context": {
			"patterns": [
				{
					"include": "#function-call-innards"
				},
				{
					"include": "$self"
				}
			]
		},
		"function-call-innards": {
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#storage_types"
				},
				{
					"include": "#method_access"
				},
				{
					"include": "#member_access"
				},
				{
					"include": "#operators"
				},
				{
					"begin": "(?x)\n(?!(?:while|for|do|if|else|switch|catch|enumerate|return|typeid|alignof|alignas|sizeof|[cr]?iterate|and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq|alignof|alignas)\\s*\\()\n(\n(?:[A-Za-z_][A-Za-z0-9_]*+|::)++  # actual name\n|\n(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\n)\n\\s*(\\()",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.dasc"
						},
						"2": {
							"name": "punctuation.section.arguments.begin.bracket.round.dasc"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.arguments.end.bracket.round.dasc"
						}
					},
					"patterns": [
						{
							"include": "#function-call-innards"
						}
					]
				},
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.parens.begin.bracket.round.dasc"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.parens.end.bracket.round.dasc"
						}
					},
					"patterns": [
						{
							"include": "#function-call-innards"
						}
					]
				},
				{
					"include": "#block_innards"
				}
			]
		},
		"function-innards": {
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#storage_types"
				},
				{
					"include": "#operators"
				},
				{
					"include": "#vararg_ellipses"
				},
				{
					"name": "meta.function.definition.parameters.dasc",
					"begin": "(?x)\n(?!(?:while|for|do|if|else|switch|catch|enumerate|return|typeid|alignof|alignas|sizeof|[cr]?iterate|and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq|alignof|alignas)\\s*\\()\n(\n(?:[A-Za-z_][A-Za-z0-9_]*+|::)++  # actual name\n|\n(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\n)\n\\s*(\\()",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.dasc"
						},
						"2": {
							"name": "punctuation.section.parameters.begin.bracket.round.dasc"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.parameters.end.bracket.round.dasc"
						}
					},
					"patterns": [
						{
							"include": "#probably_a_parameter"
						},
						{
							"include": "#function-innards"
						}
					]
				},
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.parens.begin.bracket.round.dasc"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.parens.end.bracket.round.dasc"
						}
					},
					"patterns": [
						{
							"include": "#function-innards"
						}
					]
				},
				{
					"include": "$self"
				}
			]
		},
		"inline_comment": {
			"patterns": [
				{
					"patterns": [
						{
							"match": "(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/))",
							"captures": {
								"1": {
									"name": "comment.block.c punctuation.definition.comment.begin.dasc"
								},
								"2": {
									"name": "comment.block.dasc"
								},
								"3": {
									"patterns": [
										{
											"match": "\\*\\/",
											"name": "comment.block.c punctuation.definition.comment.end.dasc"
										},
										{
											"match": "\\*",
											"name": "comment.block.dasc"
										}
									]
								}
							}
						},
						{
							"match": "(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/))",
							"captures": {
								"1": {
									"name": "comment.block.c punctuation.definition.comment.begin.dasc"
								},
								"2": {
									"name": "comment.block.dasc"
								},
								"3": {
									"patterns": [
										{
											"match": "\\*\\/",
											"name": "comment.block.c punctuation.definition.comment.end.dasc"
										},
										{
											"match": "\\*",
											"name": "comment.block.dasc"
										}
									]
								}
							}
						}
					]
				},
				{
					"match": "(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/))",
					"captures": {
						"1": {
							"name": "comment.block.c punctuation.definition.comment.begin.dasc"
						},
						"2": {
							"name": "comment.block.dasc"
						},
						"3": {
							"patterns": [
								{
									"match": "\\*\\/",
									"name": "comment.block.c punctuation.definition.comment.end.dasc"
								},
								{
									"match": "\\*",
									"name": "comment.block.dasc"
								}
							]
						}
					}
				}
			]
		},
		"line_comment": {
			"patterns": [
				{
					"begin": "\\s*+(\\/\\/)",
					"end": "(?<=\\n)(?<!\\\\\\n)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.comment.dasc"
						}
					},
					"endCaptures": {},
					"name": "comment.line.double-slash.dasc",
					"patterns": [
						{
							"include": "#line_continuation_character"
						}
					]
				},
				{
					"begin": "\\s*+(\\/\\/)",
					"end": "(?<=\\n)(?<!\\\\\\n)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.comment.dasc"
						}
					},
					"endCaptures": {},
					"name": "comment.line.double-slash.dasc",
					"patterns": [
						{
							"include": "#line_continuation_character"
						}
					]
				}
			]
		},
		"line_continuation_character": {
			"patterns": [
				{
					"match": "(\\\\)\\n",
					"captures": {
						"1": {
							"name": "constant.character.escape.line-continuation.dasc"
						}
					}
				}
			]
		},
		"member_access": {
			"match": "((?:[a-zA-Z_]\\w*|(?<=\\]|\\)))\\s*)(?:((?:\\.\\*|\\.))|((?:->\\*|->)))((?:[a-zA-Z_]\\w*\\s*(?:(?:(?:\\.\\*|\\.))|(?:(?:->\\*|->)))\\s*)*)\\s*(\\b(?!(?:atomic_uint_least64_t|atomic_uint_least16_t|atomic_uint_least32_t|atomic_uint_least8_t|atomic_int_least16_t|atomic_uint_fast64_t|atomic_uint_fast32_t|atomic_int_least64_t|atomic_int_least32_t|pthread_rwlockattr_t|atomic_uint_fast16_t|pthread_mutexattr_t|atomic_int_fast16_t|atomic_uint_fast8_t|atomic_int_fast64_t|atomic_int_least8_t|atomic_int_fast32_t|atomic_int_fast8_t|pthread_condattr_t|atomic_uintptr_t|atomic_ptrdiff_t|pthread_rwlock_t|atomic_uintmax_t|pthread_mutex_t|atomic_intmax_t|atomic_intptr_t|atomic_char32_t|atomic_char16_t|pthread_attr_t|atomic_wchar_t|uint_least64_t|uint_least32_t|uint_least16_t|pthread_cond_t|pthread_once_t|uint_fast64_t|uint_fast16_t|atomic_size_t|uint_least8_t|int_least64_t|int_least32_t|int_least16_t|pthread_key_t|atomic_ullong|atomic_ushort|uint_fast32_t|atomic_schar|atomic_short|uint_fast8_t|int_fast64_t|int_fast32_t|int_fast16_t|atomic_ulong|atomic_llong|int_least8_t|atomic_uchar|memory_order|suseconds_t|int_fast8_t|atomic_bool|atomic_char|atomic_uint|atomic_long|atomic_int|useconds_t|_Imaginary|blksize_t|pthread_t|in_addr_t|uintptr_t|in_port_t|uintmax_t|uintmax_t|blkcnt_t|uint16_t|unsigned|_Complex|uint32_t|intptr_t|intmax_t|intmax_t|uint64_t|u_quad_t|int64_t|int32_t|ssize_t|caddr_t|clock_t|uint8_t|u_short|swblk_t|segsz_t|int16_t|fixpt_t|daddr_t|nlink_t|qaddr_t|size_t|time_t|mode_t|signed|quad_t|ushort|u_long|u_char|double|int8_t|ino_t|uid_t|pid_t|_Bool|float|dev_t|div_t|short|gid_t|off_t|u_int|key_t|id_t|uint|long|void|char|bool|id_t|int)\\b)[a-zA-Z_]\\w*\\b(?!\\())",
			"captures": {
				"1": {
					"name": "variable.other.object.access.dasc"
				},
				"2": {
					"name": "punctuation.separator.dot-access.dasc"
				},
				"3": {
					"name": "punctuation.separator.pointer-access.dasc"
				},
				"4": {
					"patterns": [
						{
							"include": "#member_access"
						},
						{
							"include": "#method_access"
						},
						{
							"match": "((?:[a-zA-Z_]\\w*|(?<=\\]|\\)))\\s*)(?:((?:\\.\\*|\\.))|((?:->\\*|->)))",
							"captures": {
								"1": {
									"name": "variable.other.object.access.dasc"
								},
								"2": {
									"name": "punctuation.separator.dot-access.dasc"
								},
								"3": {
									"name": "punctuation.separator.pointer-access.dasc"
								}
							}
						}
					]
				},
				"5": {
					"name": "variable.other.member.dasc"
				}
			}
		},
		"method_access": {
			"contentName": "meta.function-call.member.dasc",
			"begin": "((?:[a-zA-Z_]\\w*|(?<=\\]|\\)))\\s*)(?:((?:\\.\\*|\\.))|((?:->\\*|->)))((?:[a-zA-Z_]\\w*\\s*(?:(?:(?:\\.\\*|\\.))|(?:(?:->\\*|->)))\\s*)*)\\s*([a-zA-Z_]\\w*)(\\()",
			"beginCaptures": {
				"1": {
					"name": "variable.other.object.access.dasc"
				},
				"2": {
					"name": "punctuation.separator.dot-access.dasc"
				},
				"3": {
					"name": "punctuation.separator.pointer-access.dasc"
				},
				"4": {
					"patterns": [
						{
							"include": "#member_access"
						},
						{
							"include": "#method_access"
						},
						{
							"match": "((?:[a-zA-Z_]\\w*|(?<=\\]|\\)))\\s*)(?:((?:\\.\\*|\\.))|((?:->\\*|->)))",
							"captures": {
								"1": {
									"name": "variable.other.object.access.dasc"
								},
								"2": {
									"name": "punctuation.separator.dot-access.dasc"
								},
								"3": {
									"name": "punctuation.separator.pointer-access.dasc"
								}
							}
						}
					]
				},
				"5": {
					"name": "entity.name.function.member.dasc"
				},
				"6": {
					"name": "punctuation.section.arguments.begin.bracket.round.function.member.dasc"
				}
			},
			"end": "(\\))",
			"endCaptures": {
				"1": {
					"name": "punctuation.section.arguments.end.bracket.round.function.member.dasc"
				}
			},
			"patterns": [
				{
					"include": "#function-call-innards"
				}
			]
		},
		"numbers": {
			"match": "(?<!\\w)\\.?\\d(?:(?:[0-9a-zA-Z_\\.]|')|(?<=[eEpP])[+-])*",
			"captures": {
				"0": {
					"patterns": [
						{
							"begin": "(?=.)",
							"end": "$",
							"patterns": [
								{
									"match": "(\\G0[xX])([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?:(?<=[0-9a-fA-F])\\.|\\.(?=[0-9a-fA-F])))([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?<!')([pP])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?([lLfF](?!\\w))?$",
									"captures": {
										"1": {
											"name": "keyword.other.unit.hexadecimal.dasc"
										},
										"2": {
											"name": "constant.numeric.hexadecimal.dasc",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										},
										"3": {
											"name": "punctuation.separator.constant.numeric"
										},
										"4": {
											"name": "constant.numeric.hexadecimal.dasc"
										},
										"5": {
											"name": "constant.numeric.hexadecimal.dasc",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										},
										"6": {
											"name": "punctuation.separator.constant.numeric"
										},
										"8": {
											"name": "keyword.other.unit.exponent.hexadecimal.dasc"
										},
										"9": {
											"name": "keyword.operator.plus.exponent.hexadecimal.dasc"
										},
										"10": {
											"name": "keyword.operator.minus.exponent.hexadecimal.dasc"
										},
										"11": {
											"name": "constant.numeric.exponent.hexadecimal.dasc",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										},
										"12": {
											"name": "keyword.other.unit.suffix.floating-point.dasc"
										}
									}
								},
								{
									"match": "(\\G(?=[0-9.])(?!0[xXbB]))([0-9](?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?:(?<=[0-9])\\.|\\.(?=[0-9])))([0-9](?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?<!')([eE])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?([lLfF](?!\\w))?$",
									"captures": {
										"2": {
											"name": "constant.numeric.decimal.dasc",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										},
										"3": {
											"name": "punctuation.separator.constant.numeric"
										},
										"4": {
											"name": "constant.numeric.decimal.point.dasc"
										},
										"5": {
											"name": "constant.numeric.decimal.dasc",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										},
										"6": {
											"name": "punctuation.separator.constant.numeric"
										},
										"8": {
											"name": "keyword.other.unit.exponent.decimal.dasc"
										},
										"9": {
											"name": "keyword.operator.plus.exponent.decimal.dasc"
										},
										"10": {
											"name": "keyword.operator.minus.exponent.decimal.dasc"
										},
										"11": {
											"name": "constant.numeric.exponent.decimal.dasc",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										},
										"12": {
											"name": "keyword.other.unit.suffix.floating-point.dasc"
										}
									}
								},
								{
									"match": "(\\G0[bB])([01](?:[01]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w))?$",
									"captures": {
										"1": {
											"name": "keyword.other.unit.binary.dasc"
										},
										"2": {
											"name": "constant.numeric.binary.dasc",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										},
										"3": {
											"name": "punctuation.separator.constant.numeric"
										},
										"4": {
											"name": "keyword.other.unit.suffix.integer.dasc"
										}
									}
								},
								{
									"match": "(\\G0)((?:[0-7]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))+)((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w))?$",
									"captures": {
										"1": {
											"name": "keyword.other.unit.octal.dasc"
										},
										"2": {
											"name": "constant.numeric.octal.dasc",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										},
										"3": {
											"name": "punctuation.separator.constant.numeric"
										},
										"4": {
											"name": "keyword.other.unit.suffix.integer.dasc"
										}
									}
								},
								{
									"match": "(\\G0[xX])([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)((?<!')([pP])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w))?$",
									"captures": {
										"1": {
											"name": "keyword.other.unit.hexadecimal.dasc"
										},
										"2": {
											"name": "constant.numeric.hexadecimal.dasc",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										},
										"3": {
											"name": "punctuation.separator.constant.numeric"
										},
										"5": {
											"name": "keyword.other.unit.exponent.hexadecimal.dasc"
										},
										"6": {
											"name": "keyword.operator.plus.exponent.hexadecimal.dasc"
										},
										"7": {
											"name": "keyword.operator.minus.exponent.hexadecimal.dasc"
										},
										"8": {
											"name": "constant.numeric.exponent.hexadecimal.dasc",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										},
										"9": {
											"name": "keyword.other.unit.suffix.integer.dasc"
										}
									}
								},
								{
									"match": "(\\G(?=[0-9.])(?!0[xXbB]))([0-9](?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)((?<!')([eE])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w))?$",
									"captures": {
										"2": {
											"name": "constant.numeric.decimal.dasc",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										},
										"3": {
											"name": "punctuation.separator.constant.numeric"
										},
										"5": {
											"name": "keyword.other.unit.exponent.decimal.dasc"
										},
										"6": {
											"name": "keyword.operator.plus.exponent.decimal.dasc"
										},
										"7": {
											"name": "keyword.operator.minus.exponent.decimal.dasc"
										},
										"8": {
											"name": "constant.numeric.exponent.decimal.dasc",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										},
										"9": {
											"name": "keyword.other.unit.suffix.integer.dasc"
										}
									}
								},
								{
									"match": "(?:(?:[0-9a-zA-Z_\\.]|')|(?<=[eEpP])[+-])+",
									"name": "invalid.illegal.constant.numeric"
								}
							]
						}
					]
				}
			}
		},
		"operators": {
			"patterns": [
				{
					"match": "(?<![\\w$])(sizeof)(?![\\w$])",
					"name": "keyword.operator.sizeof.dasc"
				},
				{
					"match": "--",
					"name": "keyword.operator.decrement.dasc"
				},
				{
					"match": "\\+\\+",
					"name": "keyword.operator.increment.dasc"
				},
				{
					"match": "%=|\\+=|-=|\\*=|(?<!\\()/=",
					"name": "keyword.operator.assignment.compound.dasc"
				},
				{
					"match": "&=|\\^=|<<=|>>=|\\|=",
					"name": "keyword.operator.assignment.compound.bitwise.dasc"
				},
				{
					"match": "<<|>>",
					"name": "keyword.operator.bitwise.shift.dasc"
				},
				{
					"match": "!=|<=|>=|==|<|>",
					"name": "keyword.operator.comparison.dasc"
				},
				{
					"match": "&&|!|\\|\\|",
					"name": "keyword.operator.logical.dasc"
				},
				{
					"match": "&|\\||\\^|~",
					"name": "keyword.operator.dasc"
				},
				{
					"match": "=",
					"name": "keyword.operator.assignment.dasc"
				},
				{
					"match": "%|\\*|/|-|\\+",
					"name": "keyword.operator.dasc"
				},
				{
					"begin": "(\\?)",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.ternary.dasc"
						}
					},
					"end": "(:)",
					"endCaptures": {
						"1": {
							"name": "keyword.operator.ternary.dasc"
						}
					},
					"patterns": [
						{
							"include": "#function-call-innards"
						},
						{
							"include": "$self"
						}
					]
				}
			]
		},
		"parens": {
			"name": "meta.parens.dasc",
			"begin": "\\(",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.parens.begin.bracket.round.dasc"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.parens.end.bracket.round.dasc"
				}
			},
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		"parens-block": {
			"name": "meta.parens.block.dasc",
			"begin": "\\(",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.parens.begin.bracket.round.dasc"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.parens.end.bracket.round.dasc"
				}
			},
			"patterns": [
				{
					"include": "#block_innards"
				},
				{
					"match": "(?-mix:(?<!:):(?!:))",
					"name": "punctuation.range-based.dasc"
				}
			]
		},
		"pragma-mark": {
			"captures": {
				"1": {
					"name": "meta.preprocessor.pragma.dasc"
				},
				"2": {
					"name": "keyword.control.directive.pragma.pragma-mark.dasc"
				},
				"3": {
					"name": "punctuation.definition.directive.dasc"
				},
				"4": {
					"name": "entity.name.tag.pragma-mark.dasc"
				}
			},
			"match": "^\\s*(((#)\\s*pragma\\s+mark)\\s+(.*))",
			"name": "meta.section.dasc"
		},
		"predefined_macros": {
			"patterns": [
				{
					"match": "\\b(__cplusplus|__DATE__|__FILE__|__LINE__|__STDC__|__STDC_HOSTED__|__STDC_NO_COMPLEX__|__STDC_VERSION__|__STDCPP_THREADS__|__TIME__|NDEBUG|__OBJC__|__ASSEMBLER__|__ATOM__|__AVX__|__AVX2__|_CHAR_UNSIGNED|__CLR_VER|_CONTROL_FLOW_GUARD|__COUNTER__|__cplusplus_cli|__cplusplus_winrt|_CPPRTTI|_CPPUNWIND|_DEBUG|_DLL|__FUNCDNAME__|__FUNCSIG__|__FUNCTION__|_INTEGRAL_MAX_BITS|__INTELLISENSE__|_ISO_VOLATILE|_KERNEL_MODE|_M_AMD64|_M_ARM|_M_ARM_ARMV7VE|_M_ARM_FP|_M_ARM64|_M_CEE|_M_CEE_PURE|_M_CEE_SAFE|_M_FP_EXCEPT|_M_FP_FAST|_M_FP_PRECISE|_M_FP_STRICT|_M_IX86|_M_IX86_FP|_M_X64|_MANAGED|_MSC_BUILD|_MSC_EXTENSIONS|_MSC_FULL_VER|_MSC_VER|_MSVC_LANG|__MSVC_RUNTIME_CHECKS|_MT|_NATIVE_WCHAR_T_DEFINED|_OPENMP|_PREFAST|__TIMESTAMP__|_VC_NO_DEFAULTLIB|_WCHAR_T_DEFINED|_WIN32|_WIN64|_WINRT_DLL|_ATL_VER|_MFC_VER|__GFORTRAN__|__GNUC__|__GNUC_MINOR__|__GNUC_PATCHLEVEL__|__GNUG__|__STRICT_ANSI__|__BASE_FILE__|__INCLUDE_LEVEL__|__ELF__|__VERSION__|__OPTIMIZE__|__OPTIMIZE_SIZE__|__NO_INLINE__|__GNUC_STDC_INLINE__|__CHAR_UNSIGNED__|__WCHAR_UNSIGNED__|__REGISTER_PREFIX__|__REGISTER_PREFIX__|__SIZE_TYPE__|__PTRDIFF_TYPE__|__WCHAR_TYPE__|__WINT_TYPE__|__INTMAX_TYPE__|__UINTMAX_TYPE__|__SIG_ATOMIC_TYPE__|__INT8_TYPE__|__INT16_TYPE__|__INT32_TYPE__|__INT64_TYPE__|__UINT8_TYPE__|__UINT16_TYPE__|__UINT32_TYPE__|__UINT64_TYPE__|__INT_LEAST8_TYPE__|__INT_LEAST16_TYPE__|__INT_LEAST32_TYPE__|__INT_LEAST64_TYPE__|__UINT_LEAST8_TYPE__|__UINT_LEAST16_TYPE__|__UINT_LEAST32_TYPE__|__UINT_LEAST64_TYPE__|__INT_FAST8_TYPE__|__INT_FAST16_TYPE__|__INT_FAST32_TYPE__|__INT_FAST64_TYPE__|__UINT_FAST8_TYPE__|__UINT_FAST16_TYPE__|__UINT_FAST32_TYPE__|__UINT_FAST64_TYPE__|__INTPTR_TYPE__|__UINTPTR_TYPE__|__CHAR_BIT__|__SCHAR_MAX__|__WCHAR_MAX__|__SHRT_MAX__|__INT_MAX__|__LONG_MAX__|__LONG_LONG_MAX__|__WINT_MAX__|__SIZE_MAX__|__PTRDIFF_MAX__|__INTMAX_MAX__|__UINTMAX_MAX__|__SIG_ATOMIC_MAX__|__INT8_MAX__|__INT16_MAX__|__INT32_MAX__|__INT64_MAX__|__UINT8_MAX__|__UINT16_MAX__|__UINT32_MAX__|__UINT64_MAX__|__INT_LEAST8_MAX__|__INT_LEAST16_MAX__|__INT_LEAST32_MAX__|__INT_LEAST64_MAX__|__UINT_LEAST8_MAX__|__UINT_LEAST16_MAX__|__UINT_LEAST32_MAX__|__UINT_LEAST64_MAX__|__INT_FAST8_MAX__|__INT_FAST16_MAX__|__INT_FAST32_MAX__|__INT_FAST64_MAX__|__UINT_FAST8_MAX__|__UINT_FAST16_MAX__|__UINT_FAST32_MAX__|__UINT_FAST64_MAX__|__INTPTR_MAX__|__UINTPTR_MAX__|__WCHAR_MIN__|__WINT_MIN__|__SIG_ATOMIC_MIN__|__SCHAR_WIDTH__|__SHRT_WIDTH__|__INT_WIDTH__|__LONG_WIDTH__|__LONG_LONG_WIDTH__|__PTRDIFF_WIDTH__|__SIG_ATOMIC_WIDTH__|__SIZE_WIDTH__|__WCHAR_WIDTH__|__WINT_WIDTH__|__INT_LEAST8_WIDTH__|__INT_LEAST16_WIDTH__|__INT_LEAST32_WIDTH__|__INT_LEAST64_WIDTH__|__INT_FAST8_WIDTH__|__INT_FAST16_WIDTH__|__INT_FAST32_WIDTH__|__INT_FAST64_WIDTH__|__INTPTR_WIDTH__|__INTMAX_WIDTH__|__SIZEOF_INT__|__SIZEOF_LONG__|__SIZEOF_LONG_LONG__|__SIZEOF_SHORT__|__SIZEOF_POINTER__|__SIZEOF_FLOAT__|__SIZEOF_DOUBLE__|__SIZEOF_LONG_DOUBLE__|__SIZEOF_SIZE_T__|__SIZEOF_WCHAR_T__|__SIZEOF_WINT_T__|__SIZEOF_PTRDIFF_T__|__BYTE_ORDER__|__ORDER_LITTLE_ENDIAN__|__ORDER_BIG_ENDIAN__|__ORDER_PDP_ENDIAN__|__FLOAT_WORD_ORDER__|__DEPRECATED|__EXCEPTIONS|__GXX_RTTI|__USING_SJLJ_EXCEPTIONS__|__GXX_EXPERIMENTAL_CXX0X__|__GXX_WEAK__|__NEXT_RUNTIME__|__LP64__|_LP64|__SSP__|__SSP_ALL__|__SSP_STRONG__|__SSP_EXPLICIT__|__SANITIZE_ADDRESS__|__SANITIZE_THREAD__|__GCC_HAVE_SYNC_COMPARE_AND_SWAP_1|__GCC_HAVE_SYNC_COMPARE_AND_SWAP_2|__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4|__GCC_HAVE_SYNC_COMPARE_AND_SWAP_8|__GCC_HAVE_SYNC_COMPARE_AND_SWAP_16|__HAVE_SPECULATION_SAFE_VALUE|__GCC_HAVE_DWARF2_CFI_ASM|__FP_FAST_FMA|__FP_FAST_FMAF|__FP_FAST_FMAL|__FP_FAST_FMAF16|__FP_FAST_FMAF32|__FP_FAST_FMAF64|__FP_FAST_FMAF128|__FP_FAST_FMAF32X|__FP_FAST_FMAF64X|__FP_FAST_FMAF128X|__GCC_IEC_559|__GCC_IEC_559_COMPLEX|__NO_MATH_ERRNO__|__has_builtin|__has_feature|__has_extension|__has_cpp_attribute|__has_c_attribute|__has_attribute|__has_declspec_attribute|__is_identifier|__has_include|__has_include_next|__has_warning|__BASE_FILE__|__FILE_NAME__|__clang__|__clang_major__|__clang_minor__|__clang_patchlevel__|__clang_version__|__fp16|_Float16)\\b",
					"captures": {
						"1": {
							"name": "entity.name.other.preprocessor.macro.predefined.$1.dasc"
						}
					}
				},
				{
					"match": "\\b__([A-Z_]+)__\\b",
					"name": "entity.name.other.preprocessor.macro.predefined.probably.$1.dasc"
				}
			]
		},
		"preprocessor-rule-conditional": {
			"patterns": [
				{
					"begin": "^\\s*((#)\\s*if(?:n?def)?\\b)",
					"beginCaptures": {
						"0": {
							"name": "meta.preprocessor.dasc"
						},
						"1": {
							"name": "keyword.control.directive.conditional.dasc"
						},
						"2": {
							"name": "punctuation.definition.directive.dasc"
						}
					},
					"end": "^\\s*((#)\\s*endif\\b)",
					"endCaptures": {
						"0": {
							"name": "meta.preprocessor.dasc"
						},
						"1": {
							"name": "keyword.control.directive.conditional.dasc"
						},
						"2": {
							"name": "punctuation.definition.directive.dasc"
						}
					},
					"patterns": [
						{
							"begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
							"end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
							"name": "meta.preprocessor.dasc",
							"patterns": [
								{
									"include": "#preprocessor-rule-conditional-line"
								}
							]
						},
						{
							"include": "#preprocessor-rule-enabled-elif"
						},
						{
							"include": "#preprocessor-rule-enabled-else"
						},
						{
							"include": "#preprocessor-rule-disabled-elif"
						},
						{
							"begin": "^\\s*((#)\\s*elif\\b)",
							"beginCaptures": {
								"1": {
									"name": "keyword.control.directive.conditional.dasc"
								},
								"2": {
									"name": "punctuation.definition.directive.dasc"
								}
							},
							"end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
							"name": "meta.preprocessor.dasc",
							"patterns": [
								{
									"include": "#preprocessor-rule-conditional-line"
								}
							]
						},
						{
							"include": "$self"
						}
					]
				},
				{
					"match": "^\\s*#\\s*(else|elif|endif)\\b",
					"captures": {
						"0": {
							"name": "invalid.illegal.stray-$1.dasc"
						}
					}
				}
			]
		},
		"preprocessor-rule-conditional-block": {
			"patterns": [
				{
					"begin": "^\\s*((#)\\s*if(?:n?def)?\\b)",
					"beginCaptures": {
						"0": {
							"name": "meta.preprocessor.dasc"
						},
						"1": {
							"name": "keyword.control.directive.conditional.dasc"
						},
						"2": {
							"name": "punctuation.definition.directive.dasc"
						}
					},
					"end": "^\\s*((#)\\s*endif\\b)",
					"endCaptures": {
						"0": {
							"name": "meta.preprocessor.dasc"
						},
						"1": {
							"name": "keyword.control.directive.conditional.dasc"
						},
						"2": {
							"name": "punctuation.definition.directive.dasc"
						}
					},
					"patterns": [
						{
							"begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
							"end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
							"name": "meta.preprocessor.dasc",
							"patterns": [
								{
									"include": "#preprocessor-rule-conditional-line"
								}
							]
						},
						{
							"include": "#preprocessor-rule-enabled-elif-block"
						},
						{
							"include": "#preprocessor-rule-enabled-else-block"
						},
						{
							"include": "#preprocessor-rule-disabled-elif"
						},
						{
							"begin": "^\\s*((#)\\s*elif\\b)",
							"beginCaptures": {
								"1": {
									"name": "keyword.control.directive.conditional.dasc"
								},
								"2": {
									"name": "punctuation.definition.directive.dasc"
								}
							},
							"end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
							"name": "meta.preprocessor.dasc",
							"patterns": [
								{
									"include": "#preprocessor-rule-conditional-line"
								}
							]
						},
						{
							"include": "#block_innards"
						}
					]
				},
				{
					"match": "^\\s*#\\s*(else|elif|endif)\\b",
					"captures": {
						"0": {
							"name": "invalid.illegal.stray-$1.dasc"
						}
					}
				}
			]
		},
		"preprocessor-rule-conditional-line": {
			"patterns": [
				{
					"match": "(?:\\bdefined\\b\\s*$)|(?:\\bdefined\\b(?=\\s*\\(*\\s*(?:(?!defined\\b)[a-zA-Z_$][\\w$]*\\b)\\s*\\)*\\s*(?:\\n|//|/\\*|\\?|\\:|&&|\\|\\||\\\\\\s*\\n)))",
					"name": "keyword.control.directive.conditional.dasc"
				},
				{
					"match": "\\bdefined\\b",
					"name": "invalid.illegal.macro-name.dasc"
				},
				{
					"include": "#comments"
				},
				{
					"include": "#strings"
				},
				{
					"include": "#numbers"
				},
				{
					"begin": "\\?",
					"beginCaptures": {
						"0": {
							"name": "keyword.operator.ternary.dasc"
						}
					},
					"end": ":",
					"endCaptures": {
						"0": {
							"name": "keyword.operator.ternary.dasc"
						}
					},
					"patterns": [
						{
							"include": "#preprocessor-rule-conditional-line"
						}
					]
				},
				{
					"include": "#operators"
				},
				{
					"match": "\\b(NULL|true|false|TRUE|FALSE)\\b",
					"name": "constant.language.dasc"
				},
				{
					"match": "[a-zA-Z_$][\\w$]*",
					"name": "entity.name.function.preprocessor.dasc"
				},
				{
					"include": "#line_continuation_character"
				},
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.parens.begin.bracket.round.dasc"
						}
					},
					"end": "\\)|(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.parens.end.bracket.round.dasc"
						}
					},
					"patterns": [
						{
							"include": "#preprocessor-rule-conditional-line"
						}
					]
				}
			]
		},
		"preprocessor-rule-define-line-blocks": {
			"patterns": [
				{
					"begin": "{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.block.begin.bracket.curly.dasc"
						}
					},
					"end": "}|(?=\\s*#\\s*(?:elif|else|endif)\\b)|(?<!\\\\)(?=\\s*\\n)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.block.end.bracket.curly.dasc"
						}
					},
					"patterns": [
						{
							"include": "#preprocessor-rule-define-line-blocks"
						},
						{
							"include": "#preprocessor-rule-define-line-contents"
						}
					]
				},
				{
					"include": "#preprocessor-rule-define-line-contents"
				}
			]
		},
		"preprocessor-rule-define-line-contents": {
			"patterns": [
				{
					"include": "#vararg_ellipses"
				},
				{
					"begin": "{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.block.begin.bracket.curly.dasc"
						}
					},
					"end": "}|(?=\\s*#\\s*(?:elif|else|endif)\\b)|(?<!\\\\)(?=\\s*\\n)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.block.end.bracket.curly.dasc"
						}
					},
					"name": "meta.block.dasc",
					"patterns": [
						{
							"include": "#preprocessor-rule-define-line-blocks"
						}
					]
				},
				{
					"match": "\\(",
					"name": "punctuation.section.parens.begin.bracket.round.dasc"
				},
				{
					"match": "\\)",
					"name": "punctuation.section.parens.end.bracket.round.dasc"
				},
				{
					"begin": "(?x)\n(?!(?:while|for|do|if|else|switch|catch|enumerate|return|typeid|alignof|alignas|sizeof|[cr]?iterate|and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq|alignof|alignas|asm|__asm__|auto|bool|_Bool|char|_Complex|double|enum|float|_Imaginary|int|long|short|signed|struct|typedef|union|unsigned|void)\\s*\\()\n(?=\n  (?:[A-Za-z_][A-Za-z0-9_]*+|::)++\\s*\\(  # actual name\n  |\n  (?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\\s*\\(\n)",
					"end": "(?<=\\))(?!\\w)|(?<!\\\\)(?=\\s*\\n)",
					"name": "meta.function.dasc",
					"patterns": [
						{
							"include": "#preprocessor-rule-define-line-functions"
						}
					]
				},
				{
					"begin": "\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.dasc"
						}
					},
					"end": "\"|(?<!\\\\)(?=\\s*\\n)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.dasc"
						}
					},
					"name": "string.quoted.double.dasc",
					"patterns": [
						{
							"include": "#string_escaped_char"
						},
						{
							"include": "#string_placeholder"
						},
						{
							"include": "#line_continuation_character"
						}
					]
				},
				{
					"begin": "'",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.dasc"
						}
					},
					"end": "'|(?<!\\\\)(?=\\s*\\n)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.dasc"
						}
					},
					"name": "string.quoted.single.dasc",
					"patterns": [
						{
							"include": "#string_escaped_char"
						},
						{
							"include": "#line_continuation_character"
						}
					]
				},
				{
					"include": "#method_access"
				},
				{
					"include": "#member_access"
				},
				{
					"include": "$self"
				}
			]
		},
		"preprocessor-rule-define-line-functions": {
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#storage_types"
				},
				{
					"include": "#vararg_ellipses"
				},
				{
					"include": "#method_access"
				},
				{
					"include": "#member_access"
				},
				{
					"include": "#operators"
				},
				{
					"begin": "(?x)\n(?!(?:while|for|do|if|else|switch|catch|enumerate|return|typeid|alignof|alignas|sizeof|[cr]?iterate|and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq|alignof|alignas)\\s*\\()\n(\n(?:[A-Za-z_][A-Za-z0-9_]*+|::)++  # actual name\n|\n(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\n)\n\\s*(\\()",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.dasc"
						},
						"2": {
							"name": "punctuation.section.arguments.begin.bracket.round.dasc"
						}
					},
					"end": "(\\))|(?<!\\\\)(?=\\s*\\n)",
					"endCaptures": {
						"1": {
							"name": "punctuation.section.arguments.end.bracket.round.dasc"
						}
					},
					"patterns": [
						{
							"include": "#preprocessor-rule-define-line-functions"
						}
					]
				},
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.parens.begin.bracket.round.dasc"
						}
					},
					"end": "(\\))|(?<!\\\\)(?=\\s*\\n)",
					"endCaptures": {
						"1": {
							"name": "punctuation.section.parens.end.bracket.round.dasc"
						}
					},
					"patterns": [
						{
							"include": "#preprocessor-rule-define-line-functions"
						}
					]
				},
				{
					"include": "#preprocessor-rule-define-line-contents"
				}
			]
		},
		"preprocessor-rule-disabled": {
			"patterns": [
				{
					"begin": "^\\s*((#)\\s*if\\b)(?=\\s*\\(*\\b0+\\b\\)*\\s*(?:$|//|/\\*))",
					"beginCaptures": {
						"0": {
							"name": "meta.preprocessor.dasc"
						},
						"1": {
							"name": "keyword.control.directive.conditional.dasc"
						},
						"2": {
							"name": "punctuation.definition.directive.dasc"
						}
					},
					"end": "^\\s*((#)\\s*endif\\b)",
					"endCaptures": {
						"0": {
							"name": "meta.preprocessor.dasc"
						},
						"1": {
							"name": "keyword.control.directive.conditional.dasc"
						},
						"2": {
							"name": "punctuation.definition.directive.dasc"
						}
					},
					"patterns": [
						{
							"begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
							"end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?=\\n)",
							"name": "meta.preprocessor.dasc",
							"patterns": [
								{
									"include": "#preprocessor-rule-conditional-line"
								}
							]
						},
						{
							"include": "#comments"
						},
						{
							"include": "#preprocessor-rule-enabled-elif"
						},
						{
							"include": "#preprocessor-rule-enabled-else"
						},
						{
							"include": "#preprocessor-rule-disabled-elif"
						},
						{
							"begin": "^\\s*((#)\\s*elif\\b)",
							"beginCaptures": {
								"0": {
									"name": "meta.preprocessor.dasc"
								},
								"1": {
									"name": "keyword.control.directive.conditional.dasc"
								},
								"2": {
									"name": "punctuation.definition.directive.dasc"
								}
							},
							"end": "(?=^\\s*((#)\\s*(?:elif|else|endif)\\b))",
							"patterns": [
								{
									"begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
									"end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
									"name": "meta.preprocessor.dasc",
									"patterns": [
										{
											"include": "#preprocessor-rule-conditional-line"
										}
									]
								},
								{
									"include": "$self"
								}
							]
						},
						{
							"begin": "\\n",
							"end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
							"contentName": "comment.block.preprocessor.if-branch.dasc",
							"patterns": [
								{
									"include": "#disabled"
								},
								{
									"include": "#pragma-mark"
								}
							]
						}
					]
				}
			]
		},
		"preprocessor-rule-disabled-block": {
			"patterns": [
				{
					"begin": "^\\s*((#)\\s*if\\b)(?=\\s*\\(*\\b0+\\b\\)*\\s*(?:$|//|/\\*))",
					"beginCaptures": {
						"0": {
							"name": "meta.preprocessor.dasc"
						},
						"1": {
							"name": "keyword.control.directive.conditional.dasc"
						},
						"2": {
							"name": "punctuation.definition.directive.dasc"
						}
					},
					"end": "^\\s*((#)\\s*endif\\b)",
					"endCaptures": {
						"0": {
							"name": "meta.preprocessor.dasc"
						},
						"1": {
							"name": "keyword.control.directive.conditional.dasc"
						},
						"2": {
							"name": "punctuation.definition.directive.dasc"
						}
					},
					"patterns": [
						{
							"begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
							"end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?=\\n)",
							"name": "meta.preprocessor.dasc",
							"patterns": [
								{
									"include": "#preprocessor-rule-conditional-line"
								}
							]
						},
						{
							"include": "#comments"
						},
						{
							"include": "#preprocessor-rule-enabled-elif-block"
						},
						{
							"include": "#preprocessor-rule-enabled-else-block"
						},
						{
							"include": "#preprocessor-rule-disabled-elif"
						},
						{
							"begin": "^\\s*((#)\\s*elif\\b)",
							"beginCaptures": {
								"0": {
									"name": "meta.preprocessor.dasc"
								},
								"1": {
									"name": "keyword.control.directive.conditional.dasc"
								},
								"2": {
									"name": "punctuation.definition.directive.dasc"
								}
							},
							"end": "(?=^\\s*((#)\\s*(?:elif|else|endif)\\b))",
							"patterns": [
								{
									"begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
									"end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
									"name": "meta.preprocessor.dasc",
									"patterns": [
										{
											"include": "#preprocessor-rule-conditional-line"
										}
									]
								},
								{
									"include": "#block_innards"
								}
							]
						},
						{
							"begin": "\\n",
							"end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
							"contentName": "comment.block.preprocessor.if-branch.in-block.dasc",
							"patterns": [
								{
									"include": "#disabled"
								},
								{
									"include": "#pragma-mark"
								}
							]
						}
					]
				}
			]
		},
		"preprocessor-rule-disabled-elif": {
			"begin": "^\\s*((#)\\s*elif\\b)(?=\\s*\\(*\\b0+\\b\\)*\\s*(?:$|//|/\\*))",
			"beginCaptures": {
				"0": {
					"name": "meta.preprocessor.dasc"
				},
				"1": {
					"name": "keyword.control.directive.conditional.dasc"
				},
				"2": {
					"name": "punctuation.definition.directive.dasc"
				}
			},
			"end": "(?=^\\s*((#)\\s*(?:elif|else|endif)\\b))",
			"patterns": [
				{
					"begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
					"end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
					"name": "meta.preprocessor.dasc",
					"patterns": [
						{
							"include": "#preprocessor-rule-conditional-line"
						}
					]
				},
				{
					"include": "#comments"
				},
				{
					"begin": "\\n",
					"end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
					"contentName": "comment.block.preprocessor.elif-branch.dasc",
					"patterns": [
						{
							"include": "#disabled"
						},
						{
							"include": "#pragma-mark"
						}
					]
				}
			]
		},
		"preprocessor-rule-enabled": {
			"patterns": [
				{
					"begin": "^\\s*((#)\\s*if\\b)(?=\\s*\\(*\\b0*1\\b\\)*\\s*(?:$|//|/\\*))",
					"beginCaptures": {
						"0": {
							"name": "meta.preprocessor.dasc"
						},
						"1": {
							"name": "keyword.control.directive.conditional.dasc"
						},
						"2": {
							"name": "punctuation.definition.directive.dasc"
						},
						"3": {
							"name": "constant.numeric.preprocessor.dasc"
						}
					},
					"end": "^\\s*((#)\\s*endif\\b)",
					"endCaptures": {
						"0": {
							"name": "meta.preprocessor.dasc"
						},
						"1": {
							"name": "keyword.control.directive.conditional.dasc"
						},
						"2": {
							"name": "punctuation.definition.directive.dasc"
						}
					},
					"patterns": [
						{
							"begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
							"end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?=\\n)",
							"name": "meta.preprocessor.dasc",
							"patterns": [
								{
									"include": "#preprocessor-rule-conditional-line"
								}
							]
						},
						{
							"include": "#comments"
						},
						{
							"begin": "^\\s*((#)\\s*else\\b)",
							"beginCaptures": {
								"0": {
									"name": "meta.preprocessor.dasc"
								},
								"1": {
									"name": "keyword.control.directive.conditional.dasc"
								},
								"2": {
									"name": "punctuation.definition.directive.dasc"
								}
							},
							"end": "(?=^\\s*((#)\\s*endif\\b))",
							"contentName": "comment.block.preprocessor.else-branch.dasc",
							"patterns": [
								{
									"include": "#disabled"
								},
								{
									"include": "#pragma-mark"
								}
							]
						},
						{
							"begin": "^\\s*((#)\\s*elif\\b)",
							"beginCaptures": {
								"0": {
									"name": "meta.preprocessor.dasc"
								},
								"1": {
									"name": "keyword.control.directive.conditional.dasc"
								},
								"2": {
									"name": "punctuation.definition.directive.dasc"
								}
							},
							"end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
							"contentName": "comment.block.preprocessor.if-branch.dasc",
							"patterns": [
								{
									"include": "#disabled"
								},
								{
									"include": "#pragma-mark"
								}
							]
						},
						{
							"begin": "\\n",
							"end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
							"patterns": [
								{
									"include": "$self"
								}
							]
						}
					]
				}
			]
		},
		"preprocessor-rule-enabled-block": {
			"patterns": [
				{
					"begin": "^\\s*((#)\\s*if\\b)(?=\\s*\\(*\\b0*1\\b\\)*\\s*(?:$|//|/\\*))",
					"beginCaptures": {
						"0": {
							"name": "meta.preprocessor.dasc"
						},
						"1": {
							"name": "keyword.control.directive.conditional.dasc"
						},
						"2": {
							"name": "punctuation.definition.directive.dasc"
						}
					},
					"end": "^\\s*((#)\\s*endif\\b)",
					"endCaptures": {
						"0": {
							"name": "meta.preprocessor.dasc"
						},
						"1": {
							"name": "keyword.control.directive.conditional.dasc"
						},
						"2": {
							"name": "punctuation.definition.directive.dasc"
						}
					},
					"patterns": [
						{
							"begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
							"end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?=\\n)",
							"name": "meta.preprocessor.dasc",
							"patterns": [
								{
									"include": "#preprocessor-rule-conditional-line"
								}
							]
						},
						{
							"include": "#comments"
						},
						{
							"begin": "^\\s*((#)\\s*else\\b)",
							"beginCaptures": {
								"0": {
									"name": "meta.preprocessor.dasc"
								},
								"1": {
									"name": "keyword.control.directive.conditional.dasc"
								},
								"2": {
									"name": "punctuation.definition.directive.dasc"
								}
							},
							"end": "(?=^\\s*((#)\\s*endif\\b))",
							"contentName": "comment.block.preprocessor.else-branch.in-block.dasc",
							"patterns": [
								{
									"include": "#disabled"
								},
								{
									"include": "#pragma-mark"
								}
							]
						},
						{
							"begin": "^\\s*((#)\\s*elif\\b)",
							"beginCaptures": {
								"0": {
									"name": "meta.preprocessor.dasc"
								},
								"1": {
									"name": "keyword.control.directive.conditional.dasc"
								},
								"2": {
									"name": "punctuation.definition.directive.dasc"
								}
							},
							"end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
							"contentName": "comment.block.preprocessor.if-branch.in-block.dasc",
							"patterns": [
								{
									"include": "#disabled"
								},
								{
									"include": "#pragma-mark"
								}
							]
						},
						{
							"begin": "\\n",
							"end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
							"patterns": [
								{
									"include": "#block_innards"
								}
							]
						}
					]
				}
			]
		},
		"preprocessor-rule-enabled-elif": {
			"begin": "^\\s*((#)\\s*elif\\b)(?=\\s*\\(*\\b0*1\\b\\)*\\s*(?:$|//|/\\*))",
			"beginCaptures": {
				"0": {
					"name": "meta.preprocessor.dasc"
				},
				"1": {
					"name": "keyword.control.directive.conditional.dasc"
				},
				"2": {
					"name": "punctuation.definition.directive.dasc"
				}
			},
			"end": "(?=^\\s*((#)\\s*endif\\b))",
			"patterns": [
				{
					"begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
					"end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
					"name": "meta.preprocessor.dasc",
					"patterns": [
						{
							"include": "#preprocessor-rule-conditional-line"
						}
					]
				},
				{
					"include": "#comments"
				},
				{
					"begin": "\\n",
					"end": "(?=^\\s*((#)\\s*(?:endif)\\b))",
					"patterns": [
						{
							"begin": "^\\s*((#)\\s*(else)\\b)",
							"beginCaptures": {
								"0": {
									"name": "meta.preprocessor.dasc"
								},
								"1": {
									"name": "keyword.control.directive.conditional.dasc"
								},
								"2": {
									"name": "punctuation.definition.directive.dasc"
								}
							},
							"end": "(?=^\\s*((#)\\s*endif\\b))",
							"contentName": "comment.block.preprocessor.elif-branch.dasc",
							"patterns": [
								{
									"include": "#disabled"
								},
								{
									"include": "#pragma-mark"
								}
							]
						},
						{
							"begin": "^\\s*((#)\\s*(elif)\\b)",
							"beginCaptures": {
								"0": {
									"name": "meta.preprocessor.dasc"
								},
								"1": {
									"name": "keyword.control.directive.conditional.dasc"
								},
								"2": {
									"name": "punctuation.definition.directive.dasc"
								}
							},
							"end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
							"contentName": "comment.block.preprocessor.elif-branch.dasc",
							"patterns": [
								{
									"include": "#disabled"
								},
								{
									"include": "#pragma-mark"
								}
							]
						},
						{
							"include": "$self"
						}
					]
				}
			]
		},
		"preprocessor-rule-enabled-elif-block": {
			"begin": "^\\s*((#)\\s*elif\\b)(?=\\s*\\(*\\b0*1\\b\\)*\\s*(?:$|//|/\\*))",
			"beginCaptures": {
				"0": {
					"name": "meta.preprocessor.dasc"
				},
				"1": {
					"name": "keyword.control.directive.conditional.dasc"
				},
				"2": {
					"name": "punctuation.definition.directive.dasc"
				}
			},
			"end": "(?=^\\s*((#)\\s*endif\\b))",
			"patterns": [
				{
					"begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
					"end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
					"name": "meta.preprocessor.dasc",
					"patterns": [
						{
							"include": "#preprocessor-rule-conditional-line"
						}
					]
				},
				{
					"include": "#comments"
				},
				{
					"begin": "\\n",
					"end": "(?=^\\s*((#)\\s*(?:endif)\\b))",
					"patterns": [
						{
							"begin": "^\\s*((#)\\s*(else)\\b)",
							"beginCaptures": {
								"0": {
									"name": "meta.preprocessor.dasc"
								},
								"1": {
									"name": "keyword.control.directive.conditional.dasc"
								},
								"2": {
									"name": "punctuation.definition.directive.dasc"
								}
							},
							"end": "(?=^\\s*((#)\\s*endif\\b))",
							"contentName": "comment.block.preprocessor.elif-branch.in-block.dasc",
							"patterns": [
								{
									"include": "#disabled"
								},
								{
									"include": "#pragma-mark"
								}
							]
						},
						{
							"begin": "^\\s*((#)\\s*(elif)\\b)",
							"beginCaptures": {
								"0": {
									"name": "meta.preprocessor.dasc"
								},
								"1": {
									"name": "keyword.control.directive.conditional.dasc"
								},
								"2": {
									"name": "punctuation.definition.directive.dasc"
								}
							},
							"end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
							"contentName": "comment.block.preprocessor.elif-branch.dasc",
							"patterns": [
								{
									"include": "#disabled"
								},
								{
									"include": "#pragma-mark"
								}
							]
						},
						{
							"include": "#block_innards"
						}
					]
				}
			]
		},
		"preprocessor-rule-enabled-else": {
			"begin": "^\\s*((#)\\s*else\\b)",
			"beginCaptures": {
				"0": {
					"name": "meta.preprocessor.dasc"
				},
				"1": {
					"name": "keyword.control.directive.conditional.dasc"
				},
				"2": {
					"name": "punctuation.definition.directive.dasc"
				}
			},
			"end": "(?=^\\s*((#)\\s*endif\\b))",
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		"preprocessor-rule-enabled-else-block": {
			"begin": "^\\s*((#)\\s*else\\b)",
			"beginCaptures": {
				"0": {
					"name": "meta.preprocessor.dasc"
				},
				"1": {
					"name": "keyword.control.directive.conditional.dasc"
				},
				"2": {
					"name": "punctuation.definition.directive.dasc"
				}
			},
			"end": "(?=^\\s*((#)\\s*endif\\b))",
			"patterns": [
				{
					"include": "#block_innards"
				}
			]
		},
		"probably_a_parameter": {
			"match": "(?<=(?:[a-zA-Z_0-9] |[&*>\\]\\)]))\\s*([a-zA-Z_]\\w*)\\s*(?=(?:\\[\\]\\s*)?(?:,|\\)))",
			"captures": {
				"1": {
					"name": "variable.parameter.probably.dasc"
				}
			}
		},
		"static_assert": {
			"begin": "((?>(?:(?:(?>(?<!\\s)\\s+)|(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/)))+|(?:(?:(?:(?:\\b|(?<=\\W))|(?=\\W))|\\A)|\\Z))))((?<!\\w)static_assert|_Static_assert(?!\\w))((?>(?:(?:(?>(?<!\\s)\\s+)|(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/)))+|(?:(?:(?:(?:\\b|(?<=\\W))|(?=\\W))|\\A)|\\Z))))(\\()",
			"beginCaptures": {
				"1": {
					"patterns": [
						{
							"include": "#inline_comment"
						}
					]
				},
				"2": {
					"name": "comment.block.c punctuation.definition.comment.begin.dasc"
				},
				"3": {
					"name": "comment.block.dasc"
				},
				"4": {
					"patterns": [
						{
							"match": "\\*\\/",
							"name": "comment.block.c punctuation.definition.comment.end.dasc"
						},
						{
							"match": "\\*",
							"name": "comment.block.dasc"
						}
					]
				},
				"5": {
					"name": "keyword.other.static_assert.dasc"
				},
				"6": {
					"patterns": [
						{
							"include": "#inline_comment"
						}
					]
				},
				"7": {
					"name": "comment.block.c punctuation.definition.comment.begin.dasc"
				},
				"8": {
					"name": "comment.block.dasc"
				},
				"9": {
					"patterns": [
						{
							"match": "\\*\\/",
							"name": "comment.block.c punctuation.definition.comment.end.dasc"
						},
						{
							"match": "\\*",
							"name": "comment.block.dasc"
						}
					]
				},
				"10": {
					"name": "punctuation.section.arguments.begin.bracket.round.static_assert.dasc"
				}
			},
			"end": "(\\))",
			"endCaptures": {
				"1": {
					"name": "punctuation.section.arguments.end.bracket.round.static_assert.dasc"
				}
			},
			"patterns": [
				{
					"name": "meta.static_assert.message.dasc",
					"begin": "(,)\\s*(?=(?:L|u8|u|U\\s*\\\")?)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.separator.delimiter.comma.dasc"
						}
					},
					"end": "(?=\\))",
					"patterns": [
						{
							"include": "#string_context"
						}
					]
				},
				{
					"include": "#evaluation_context"
				}
			]
		},
		"storage_types": {
			"patterns": [
				{
					"match": "(?-mix:(?<!\\w)(?:unsigned|signed|double|_Bool|short|float|long|void|char|bool|int)(?!\\w))",
					"name": "storage.type.built-in.primitive.dasc"
				},
				{
					"match": "(?-mix:(?<!\\w)(?:atomic_uint_least64_t|atomic_uint_least16_t|atomic_uint_least32_t|pthread_rwlockattr_t|atomic_uint_fast64_t|atomic_uint_fast32_t|atomic_uint_fast16_t|atomic_int_least64_t|atomic_int_least32_t|atomic_int_least16_t|atomic_uint_least8_t|atomic_uint_fast8_t|atomic_int_least8_t|atomic_int_fast16_t|pthread_mutexattr_t|atomic_int_fast32_t|atomic_int_fast64_t|atomic_int_fast8_t|pthread_condattr_t|atomic_ptrdiff_t|pthread_rwlock_t|atomic_uintptr_t|atomic_uintmax_t|atomic_intmax_t|atomic_intptr_t|atomic_char32_t|atomic_char16_t|pthread_mutex_t|pthread_cond_t|atomic_wchar_t|uint_least64_t|uint_least32_t|uint_least16_t|pthread_once_t|pthread_attr_t|int_least32_t|pthread_key_t|int_least16_t|int_least64_t|uint_least8_t|uint_fast16_t|uint_fast32_t|uint_fast64_t|atomic_ushort|atomic_ullong|atomic_size_t|int_fast16_t|int_fast64_t|uint_fast8_t|atomic_short|atomic_uchar|atomic_schar|int_least8_t|memory_order|atomic_llong|atomic_ulong|int_fast32_t|atomic_long|atomic_uint|atomic_char|int_fast8_t|suseconds_t|atomic_bool|atomic_int|_Imaginary|useconds_t|in_port_t|uintmax_t|uintmax_t|pthread_t|blksize_t|in_addr_t|uintptr_t|blkcnt_t|uint16_t|uint32_t|uint64_t|u_quad_t|_Complex|intptr_t|intmax_t|intmax_t|segsz_t|u_short|nlink_t|uint8_t|int64_t|int32_t|int16_t|fixpt_t|daddr_t|caddr_t|qaddr_t|ssize_t|clock_t|swblk_t|u_long|mode_t|int8_t|time_t|ushort|u_char|quad_t|size_t|pid_t|gid_t|uid_t|dev_t|div_t|off_t|u_int|key_t|ino_t|uint|id_t|id_t)(?!\\w))",
					"name": "storage.type.built-in.dasc"
				},
				{
					"match": "(?-mix:\\b(enum|struct|union)\\b)",
					"name": "storage.type.$1.dasc"
				},
				{
					"name": "meta.asm.dasc",
					"begin": "(\\b(?:__asm__|asm)\\b)\\s*((?:volatile)?)",
					"beginCaptures": {
						"1": {
							"name": "storage.type.asm.dasc"
						},
						"2": {
							"name": "storage.modifier.dasc"
						}
					},
					"end": "(?!\\G)",
					"patterns": [
						{
							"match": "(?:^)((?:(?:(?>\\s+)|(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/)))+?|(?:(?:(?:(?:\\b|(?<=\\W))|(?=\\W))|\\A)|\\Z)))(?:\\n|$)",
							"captures": {
								"1": {
									"patterns": [
										{
											"include": "#inline_comment"
										}
									]
								},
								"2": {
									"name": "comment.block.c punctuation.definition.comment.begin.dasc"
								},
								"3": {
									"name": "comment.block.dasc"
								},
								"4": {
									"patterns": [
										{
											"match": "\\*\\/",
											"name": "comment.block.c punctuation.definition.comment.end.dasc"
										},
										{
											"match": "\\*",
											"name": "comment.block.dasc"
										}
									]
								}
							}
						},
						{
							"include": "#comments"
						},
						{
							"begin": "(((?:(?:(?>\\s+)|(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/)))+?|(?:(?:(?:(?:\\b|(?<=\\W))|(?=\\W))|\\A)|\\Z)))\\()",
							"beginCaptures": {
								"1": {
									"name": "punctuation.section.parens.begin.bracket.round.assembly.dasc"
								},
								"2": {
									"patterns": [
										{
											"include": "#inline_comment"
										}
									]
								},
								"3": {
									"name": "comment.block.c punctuation.definition.comment.begin.dasc"
								},
								"4": {
									"name": "comment.block.dasc"
								},
								"5": {
									"patterns": [
										{
											"match": "\\*\\/",
											"name": "comment.block.c punctuation.definition.comment.end.dasc"
										},
										{
											"match": "\\*",
											"name": "comment.block.dasc"
										}
									]
								}
							},
							"end": "(\\))",
							"endCaptures": {
								"1": {
									"name": "punctuation.section.parens.end.bracket.round.assembly.dasc"
								}
							},
							"patterns": [
								{
									"name": "string.quoted.double.dasc",
									"contentName": "meta.embedded.assembly.dasc",
									"begin": "(R?)(\")",
									"beginCaptures": {
										"1": {
											"name": "meta.encoding.dasc"
										},
										"2": {
											"name": "punctuation.definition.string.begin.assembly.dasc"
										}
									},
									"end": "(\")",
									"endCaptures": {
										"1": {
											"name": "punctuation.definition.string.end.assembly.dasc"
										}
									},
									"patterns": [
										{
											"include": "source.asm"
										},
										{
											"include": "source.x86"
										},
										{
											"include": "source.x86_64"
										},
										{
											"include": "source.arm"
										},
										{
											"include": "#backslash_escapes"
										},
										{
											"include": "#string_escaped_char"
										}
									]
								},
								{
									"begin": "(\\()",
									"beginCaptures": {
										"1": {
											"name": "punctuation.section.parens.begin.bracket.round.assembly.inner.dasc"
										}
									},
									"end": "(\\))",
									"endCaptures": {
										"1": {
											"name": "punctuation.section.parens.end.bracket.round.assembly.inner.dasc"
										}
									},
									"patterns": [
										{
											"include": "#evaluation_context"
										}
									]
								},
								{
									"match": "\\[((?:(?:(?>\\s+)|(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/)))+?|(?:(?:(?:(?:\\b|(?<=\\W))|(?=\\W))|\\A)|\\Z)))([a-zA-Z_]\\w*)((?:(?:(?>\\s+)|(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/)))+?|(?:(?:(?:(?:\\b|(?<=\\W))|(?=\\W))|\\A)|\\Z)))\\]",
									"captures": {
										"1": {
											"patterns": [
												{
													"include": "#inline_comment"
												}
											]
										},
										"2": {
											"name": "comment.block.c punctuation.definition.comment.begin.dasc"
										},
										"3": {
											"name": "comment.block.dasc"
										},
										"4": {
											"patterns": [
												{
													"match": "\\*\\/",
													"name": "comment.block.c punctuation.definition.comment.end.dasc"
												},
												{
													"match": "\\*",
													"name": "comment.block.dasc"
												}
											]
										},
										"5": {
											"name": "variable.other.asm.label.dasc"
										},
										"6": {
											"patterns": [
												{
													"include": "#inline_comment"
												}
											]
										},
										"7": {
											"name": "comment.block.c punctuation.definition.comment.begin.dasc"
										},
										"8": {
											"name": "comment.block.dasc"
										},
										"9": {
											"patterns": [
												{
													"match": "\\*\\/",
													"name": "comment.block.c punctuation.definition.comment.end.dasc"
												},
												{
													"match": "\\*",
													"name": "comment.block.dasc"
												}
											]
										}
									}
								},
								{
									"match": ":",
									"name": "punctuation.separator.delimiter.colon.assembly.dasc"
								},
								{
									"include": "#comments"
								}
							]
						}
					]
				}
			]
		},
		"string_escaped_char": {
			"patterns": [
				{
					"match": "(?x)\\\\ (\n\\\\\t\t\t |\n[abefnprtv'\"?]   |\n[0-3]\\d{,2}\t |\n[4-7]\\d?\t\t|\nx[a-fA-F0-9]{,2} |\nu[a-fA-F0-9]{,4} |\nU[a-fA-F0-9]{,8} )",
					"name": "constant.character.escape.dasc"
				},
				{
					"match": "\\\\.",
					"name": "invalid.illegal.unknown-escape.dasc"
				}
			]
		},
		"string_placeholder": {
			"patterns": [
				{
					"match": "(?x) %\n(\\d+\\$)?\t\t\t\t\t\t   # field (argument #)\n[#0\\- +']*\t\t\t\t\t\t  # flags\n[,;:_]?\t\t\t\t\t\t\t  # separator character (AltiVec)\n((-?\\d+)|\\*(-?\\d+\\$)?)?\t\t  # minimum field width\n(\\.((-?\\d+)|\\*(-?\\d+\\$)?)?)?\t# precision\n(hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)? # length modifier\n[diouxXDOUeEfFgGaACcSspn%]\t\t   # conversion type",
					"name": "constant.other.placeholder.dasc"
				},
				{
					"match": "(%)(?!\"\\s*(PRI|SCN))",
					"captures": {
						"1": {
							"name": "invalid.illegal.placeholder.dasc"
						}
					}
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"begin": "\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.dasc"
						}
					},
					"end": "\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.dasc"
						}
					},
					"name": "string.quoted.double.dasc",
					"patterns": [
						{
							"include": "#string_escaped_char"
						},
						{
							"include": "#string_placeholder"
						},
						{
							"include": "#line_continuation_character"
						}
					]
				},
				{
					"begin": "'",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.dasc"
						}
					},
					"end": "'",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.dasc"
						}
					},
					"name": "string.quoted.single.dasc",
					"patterns": [
						{
							"include": "#string_escaped_char"
						},
						{
							"include": "#line_continuation_character"
						}
					]
				}
			]
		},
		"switch_conditional_parentheses": {
			"name": "meta.conditional.switch.dasc",
			"begin": "((?>(?:(?:(?>(?<!\\s)\\s+)|(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/)))+|(?:(?:(?:(?:\\b|(?<=\\W))|(?=\\W))|\\A)|\\Z))))(\\()",
			"beginCaptures": {
				"1": {
					"patterns": [
						{
							"include": "#inline_comment"
						}
					]
				},
				"2": {
					"name": "comment.block.c punctuation.definition.comment.begin.dasc"
				},
				"3": {
					"name": "comment.block.dasc"
				},
				"4": {
					"patterns": [
						{
							"match": "\\*\\/",
							"name": "comment.block.c punctuation.definition.comment.end.dasc"
						},
						{
							"match": "\\*",
							"name": "comment.block.dasc"
						}
					]
				},
				"5": {
					"name": "punctuation.section.parens.begin.bracket.round.conditional.switch.dasc"
				}
			},
			"end": "(\\))",
			"endCaptures": {
				"1": {
					"name": "punctuation.section.parens.end.bracket.round.conditional.switch.dasc"
				}
			},
			"patterns": [
				{
					"include": "#evaluation_context"
				},
				{
					"include": "#c_conditional_context"
				}
			]
		},
		"switch_statement": {
			"name": "meta.block.switch.dasc",
			"begin": "(((?>(?:(?:(?>(?<!\\s)\\s+)|(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/)))+|(?:(?:(?:(?:\\b|(?<=\\W))|(?=\\W))|\\A)|\\Z))))((?<!\\w)switch(?!\\w)))",
			"beginCaptures": {
				"1": {
					"name": "meta.head.switch.dasc"
				},
				"2": {
					"patterns": [
						{
							"include": "#inline_comment"
						}
					]
				},
				"3": {
					"name": "comment.block.c punctuation.definition.comment.begin.dasc"
				},
				"4": {
					"name": "comment.block.dasc"
				},
				"5": {
					"patterns": [
						{
							"match": "\\*\\/",
							"name": "comment.block.c punctuation.definition.comment.end.dasc"
						},
						{
							"match": "\\*",
							"name": "comment.block.dasc"
						}
					]
				},
				"6": {
					"name": "keyword.control.switch.dasc"
				}
			},
			"end": "(?:(?<=\\}|%>|\\?\\?>)|(?=[;>\\[\\]=]))",
			"patterns": [
				{
					"name": "meta.head.switch.dasc",
					"begin": "\\G ?",
					"end": "((?:\\{|<%|\\?\\?<|(?=;)))",
					"endCaptures": {
						"1": {
							"name": "punctuation.section.block.begin.bracket.curly.switch.dasc"
						}
					},
					"patterns": [
						{
							"include": "#switch_conditional_parentheses"
						},
						{
							"include": "$self"
						}
					]
				},
				{
					"name": "meta.body.switch.dasc",
					"begin": "(?<=\\{|<%|\\?\\?<)",
					"end": "(\\}|%>|\\?\\?>)",
					"endCaptures": {
						"1": {
							"name": "punctuation.section.block.end.bracket.curly.switch.dasc"
						}
					},
					"patterns": [
						{
							"include": "#default_statement"
						},
						{
							"include": "#case_statement"
						},
						{
							"include": "$self"
						},
						{
							"include": "#block_innards"
						}
					]
				},
				{
					"name": "meta.tail.switch.dasc",
					"begin": "(?<=\\}|%>|\\?\\?>)[\\s\\n]*",
					"end": "[\\s\\n]*(?=;)",
					"patterns": [
						{
							"include": "$self"
						}
					]
				}
			]
		},
		"vararg_ellipses": {
			"match": "(?<!\\.)\\.\\.\\.(?!\\.)",
			"name": "punctuation.vararg-ellipses.dasc"
		}
	}
}