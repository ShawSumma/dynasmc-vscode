# frozen_string_literal: true
require 'ruby_grammar_builder'
require 'walk_up'
require_relative walk_up_until("paths.rb")
require_relative './tokens.rb'

# 
# 
# create grammar!
# 
# 
grammar = Grammar.fromTmLanguage(__dir__+"/modified.tmLanguage.json")

# 
#
# Setup Grammar
#
# 
    grammar[:$initial_context] = [
        # This is just the initial_context from the c.frozen.tmLanguage.json
        :'preprocessor-rule-enabled',
        :'preprocessor-rule-disabled',
        :'preprocessor-rule-conditional',
        :predefined_macros,
        :comments,
        :switch_statement,
        :anon_pattern_1,
        :storage_types,
        :anon_pattern_2,
        :anon_pattern_3,
        :anon_pattern_4,
        :anon_pattern_5,
        :anon_pattern_6,
        :anon_pattern_7,
        :operators,
        :numbers,
        :strings,
        :anon_pattern_range_1,
        :anon_pattern_range_2,
        :anon_pattern_range_3,
        :'pragma-mark',
        :anon_pattern_range_4,
        :anon_pattern_range_5,
        :anon_pattern_range_6,
        :anon_pattern_8,
        :anon_pattern_9,
        :anon_pattern_10,
        :anon_pattern_11,
        :anon_pattern_12,
        :anon_pattern_13,
        :block,
        :parens,
        :anon_pattern_range_7,
        :line_continuation_character,
        :anon_pattern_range_8,
        :anon_pattern_range_9,
        :anon_pattern_14,
        :anon_pattern_15,
    ]

# 
# Helpers
# 
    # @space
    # @spaces
    # @digit
    # @digits
    # @standard_character
    # @word
    # @word_boundary
    # @white_space_start_boundary
    # @white_space_end_boundary
    # @start_of_document
    # @end_of_document
    # @start_of_line
    # @end_of_line
    part_of_a_variable = /[a-zA-Z_][a-zA-Z_0-9]*/
    # this is really useful for keywords. eg: variableBounds[/new/] wont match "newThing" or "thingnew"
    variableBounds = ->(regex_pattern) do
        lookBehindToAvoid(@standard_character).then(regex_pattern).lookAheadToAvoid(@standard_character)
    end
    variable = variableBounds[part_of_a_variable]
    
# 
# basic patterns
# 
    # example for overriding the numbers pattern
    # grammar[:numbers] = Pattern.new(
    #     match: /regex/,
    #     tag_as: "something.something",
    # )

# 
# imports
# 
    grammar.import(PathFor[:pattern]["comments"])

#
# Save
#
name = "c"
grammar.save_to(
    syntax_name: name,
    syntax_dir: "./autogenerated",
    tag_dir: "./autogenerated",
)